labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:500,1:500],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:500,1:500],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:100,1:100],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:100,1:100],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
# Load FieldSimR and AlphaSimR
library(FieldSimR)
library(AlphaSimR)
# Simulation parameters
Ge           # between-environment genetic variance matrix, obtained from Supplementary Script S1
p <- 1000    # number of environments in the TPE
v <- 400     # number of genotypes in the breeding population
r <- 2       # number of replicate blocks in each environment
# i.e. v*p = 400,000 genotype by environment combinations
# Genetic architecture and trait parameters
nchr <- 20   # number of chromosomes
nQTN <- 200  # number of QTN per chromosome
mu <- 4      # overall trait mean
H2 <- 0.3    # overall plot-level heritability
# Model parameters
k <- 7       # number of multiplicative terms (equivalent to rank of Ge)
# 1. Simulate genetic values in AlphaSimR using FieldSimR's wrapper functions
# multi_asr_input() and multi_asr_output()
# The function multi_asr_input() decomposes the between-environment genetic variance matrix
# to obtain the environmental covariates and stores the variance matrix of the genotype slopes
# to simulate use with AlphaSimR to generate appropriate population structure.
library(FieldSimR)
Ce <- cov2cor(Ge) # obtain between-environment genetic correlation matrix
de <- diag(Ge)    # obtain diagonal genetic variance matrix
input_asr <- multi_asr_input(nenvs = p,
var = de,
corA = Ce,
nterms = k)
covs_tpe <- input_asr$cov.mat
# Simulate a population of inbred genotypes
library(AlphaSimR)
pop <- quickHaplo(nInd = v,
nChr = nchr,
segSites = nQTN,
inbred = TRUE)
SP <- SimParam$new(pop)
SP$addTraitA(nQtlPerChr = nQTN,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA)
pop <- newPop(pop)
# Obtain the true genetic values for all environments in the TPE using FieldSimR's
# wrapper function multi_asr_output()
gvs_tpe <- multi_asr_output(pop = pop,
nenvs = p,
nreps = r,
cov.mat = covs_tpe,
return.effects = TRUE)
gvs_tpe$gv.df$gv.Trait1 <- gvs_tpe$gv.df$gv.Trait1 + mu # add overall trait mean
head(gvs_tpe$gv.df) # genetic values for all environments in the TPE
head(gvs_tpe$Terms) # genotype slopes for all k terms
gvs_tpe <- gvs_tpe$gv.df # just take genetic values
# 3. Sample environments for the MET from the TPE using FieldSimR's function sample_met()
pm <- 20   # number of environment to be sampled in the MET dataset
v <- 400   # number of genotypes to be sampled in the MET dataset
r <- 2     # number of replicate blocks in each environment
envs_met <- sample_met(nenvs = p,
nsamples = 1000,
sample.size = pm,
replace = TRUE,
cov.mat = covs_tpe)
head(envs_met$sample)  # environments sampled in each MET
head(envs_met$cov.mat) # environmental covariates sampled in each MET
# Obtain true genetic values for the sample of genotypes and environments in the MET
gvs_met <- droplevels(gvs_tpe[gvs_tpe$env %in% envs_met$sample[[1]],]) # take first sample as an example
head(gvs_met) # genetic values for all genotypes and environments sampled in the MET
# Summarise the MET-TPE alignment based on the true mean genetic values in the MET and TPE
cor(with(gvs_met, tapply(gv.Trait1, id, mean)), with(gvs_tpe, tapply(gv.Trait1, id, mean)))
# note the expected MET-TPE alignment is
Ge_vars <- measure_variances(Ge)
sqrt(Ge_vars[1,2]/(Ge_vars[1,2] + Ge_vars[2,2]/pm))
# 4. Simulate plot errors with spatial variation using FieldSimR's core function field_trial_error()
# with default parameters
# Generate errors variances to produce an overall heritability of 0.3
sigm2gj <- de[envs_met$sample[[1]]] # genetic variances in the MET
sigm2g <- mean(sigm2gj) # mean genetic variance in the MET
sigm2e <- sigm2g/H2 - sigm2g # mean error variance in the MET
sigm2ej <- diag(skew_diag_mat(n = pm, mean.var = sigm2e)) # simulate error variances in the MET
H2j <- c(sigm2gj/(sigm2gj+sigm2ej)) # heritabilities in the MET
# Display the heritabilities using FieldSimR's function plot_hist()
plot_hist(df = H2j)
mean(H2j)
# Simulate plot errors
error_df <- field_trial_error(nenvs = pm,
nblocks = r,
varR = sigm2ej,
spatial.model = "AR1",
ncols = 20,
nrows = 40,
return.effects = TRUE)
# Display the plot errors in Environment 1 using FieldSimR's function plot_effects()
plot_effects(error_df$error.df[error_df$error.df$env == 1,], effect = "e.Trait1")
plot_effects(error_df$Trait1[error_df$Trait1$env == 1,], effect = "e.spat")
plot_effects(error_df$Trait1[error_df$Trait1$env == 1,], effect = "e.rand")
# 5. Construct the MET dataset by combining the simulated genetic values from Step 3. with the
# plot errors from Step 4. using make_phenotypes(). Genotypes are allocated to plots according
# to a randomised complete block design.
met_df <- make_phenotypes(gv.df = gvs_met,
error.df = error_df,
randomise = TRUE,
return.effects = TRUE)
head(met_df$pheno.df) # phenotypes for all environments sampled in the MET
head(met_df$Trait1) # genetic values and errors for all environments sampled in the MET
met_df <- met_df$pheno.df # just take MET dataset
# Display the phenotypes in the first environment using FieldSimR's function plot_effects()
plot_effects(met_df[met_df$env == envs_met$sample[[1]][1],], effect = "y.Trait1")
# 6. Obtain measures of expected accuracy
# Main effect accuracy in the TPE (square-root of line-mean heritability across environments)
cor(with(met_df, tapply(y.Trait1, id, mean)), with(gvs_tpe, tapply(gv.Trait1, id, mean)))
# note the expected main effect accuracy in the TPE is
sqrt(Ge_vars[1,2]/(Ge_vars[1,2] + Ge_vars[2,2]/pm + sigm2e/pm/r))
# Main effect accuracy in the MET
cor(with(met_df, tapply(y.Trait1, id, mean)), with(gvs_met, tapply(gv.Trait1, id, mean)))
# note the expected main effect accuracy in the MET is
sqrt((Ge_vars[1,2] + Ge_vars[2,2]/pm)/(Ge_vars[1,2] + Ge_vars[2,2]/pm + sigm2e/pm/r))
# Accuracy of the GE effects in the MET (square-root of line-mean heritability within environments)
summary(diag(cor(with(met_df, tapply(y.Trait1, list(id, env), mean)),
with(gvs_met, tapply(gv.Trait1, list(id, env), mean)))))
# note the expected accuracy of the GE effects in the MET is
sqrt((Ge_vars[1,2] + Ge_vars[2,2])/(Ge_vars[1,2] + Ge_vars[2,2] + sigm2e/r))
gvs_met$env
# Load ASReml-R
library(asreml)
# The following are generated in Supplementary Script S2
met_df   # MET data frame
gvs_met  # true genetic values in MET
gvs_tpe  # true genetic values in MET
# Output data frame
modelNames <- c("Main", "Comp", "MDiag", "Diag", "FA1")
output <- data.frame(
GEI = rep("Moderate", length(modelNames)),
Envs = rep(pm, length(modelNames)),
Model = modelNames,
LogLik = NA,
AIC = NA,
acc_g_met = NA,
acc_g_tpe = NA,
acc_ge_met = NA,
stringsAsFactors = FALSE  # Use this to avoid factors if you're handling text data
)
# Get true values
g_met_true <- with(gvs_met, tapply(gv.Trait1, id, mean))
g_tpe_true <- with(gvs_tpe, tapply(gv.Trait1, id, mean))
ge_met_true <- with(gvs_met, tapply(gv.Trait1, list(id, env), mean))
#-- Model 1: Main effects only
#
asr.main <- asreml(y.Trait1 ~ 1 + env,
random   = ~ id + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data     = met_df,
workspace = "1Gb")
#-- Model 2: Compound symmetry
asr.comp <- asreml(y.Trait1 ~ 1 + env,
random   = ~ id + env:id + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data     = met_df,
workspace = "1Gb")
#-- Model 5: Factor analytic of order 1
asr.fa1 <- asreml(y.Trait1 ~ 1 + env,
random   = ~ rr(env, 1):id + diag(env):id + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data = met_df,
workspace = "2Gb")
#-- Model 5: Factor analytic of order 1
asr.fa1 <- asreml(y.Trait1 ~ 1 + env,
random   = ~ rr(id, 1):env + diag(env):id + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data = met_df,
workspace = "2Gb")
#-- Model 5: Factor analytic of order 1
asr.fa1 <- asreml(y.Trait1 ~ 1 + env,
random   = ~ rr(id, 1):env + diag(id):env + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data = met_df,
workspace = "2Gb")
# Predicted genotype main effects
ge_met_est = asr.fa1$coefficients$random[
grep("^rr.*id", rownames(asr.fa1$coefficients$random)),]
ge_met_est = ge_met_est[
grep("Comp", names(ge_met_est), invert = TRUE)]
ge_met_est = matrix(ge_met_est, nrow = v, ncol = pm, byrow = F)
g_met_est = rowMeans(ge_met_est)
cat("acc_g_met: ", output[output$Model == "FA1",]$acc_g_met <- cor(g_met_est,g_met_true))
cat("acc_g_tpe: ", output[output$Model == "FA1",]$acc_g_tpe <- cor(g_met_est,g_tpe_true))
cat("acc_ge_met: ", output[output$Model == "FA1",]$acc_ge_met <- mean(diag(cor(ge_met_est,ge_met_true))))
# Predicted genotype main effects
ge_met_est = asr.fa1$coefficients$random[
grep("^rr.*id", rownames(asr.fa1$coefficients$random)),]
ge_met_est = ge_met_est[
grep("Comp", names(ge_met_est), invert = TRUE)]
ge_met_est = matrix(ge_met_est, nrow = v, ncol = pm, byrow = F)
g_met_est = rowMeans(ge_met_est)
# Store output
cat("LogLik: ", output[output$Model == "FA1",]$LogLik <- asr.fa1$loglik)
cat("AIC: ",    output[output$Model == "FA1",]$AIC <- summary.asreml(asr.fa1)$aic)
cat("acc_g_met: ", output[output$Model == "FA1",]$acc_g_met <- cor(g_met_est,g_met_true))
cat("acc_g_tpe: ", output[output$Model == "FA1",]$acc_g_tpe <- cor(g_met_est,g_tpe_true))
cat("acc_ge_met: ", output[output$Model == "FA1",]$acc_ge_met <- mean(diag(cor(ge_met_est,ge_met_true))))
ge_met_est
# Predicted genotype main effects
ge_met_est = asr.fa1$coefficients$random[
grep("^rr.*id", rownames(asr.fa1$coefficients$random)),]
ge_met_est = ge_met_est[
grep("Comp", names(ge_met_est), invert = TRUE)]
ge_met_est
# Predicted genotype main effects
ge_met_est = asr.fa1$coefficients$random[
grep("^rr.*id", rownames(asr.fa1$coefficients$random)),]
ge_met_est = ge_met_est[
grep("Comp", names(ge_met_est), invert = TRUE)]
ge_met_est = matrix(ge_met_est, nrow = v, ncol = pm, byrow = T)
g_met_est = rowMeans(ge_met_est)
# Store output
cat("LogLik: ", output[output$Model == "FA1",]$LogLik <- asr.fa1$loglik)
cat("AIC: ",    output[output$Model == "FA1",]$AIC <- summary.asreml(asr.fa1)$aic)
cat("acc_g_met: ", output[output$Model == "FA1",]$acc_g_met <- cor(g_met_est,g_met_true))
cat("acc_g_tpe: ", output[output$Model == "FA1",]$acc_g_tpe <- cor(g_met_est,g_tpe_true))
cat("acc_ge_met: ", output[output$Model == "FA1",]$acc_ge_met <- mean(diag(cor(ge_met_est,ge_met_true))))
?matrix
#-- Model 5: Factor analytic of order 1
asr.fa1 <- asreml(y.Trait1 ~ 1 + env,
random   = ~ rr(env, 1):id + diag(env):id + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data = met_df,
workspace = "2Gb")
# Predicted genotype main effects
ge_met_est = asr.fa1$coefficients$random[
grep("^rr.*id", rownames(asr.fa1$coefficients$random)),]
ge_met_est = ge_met_est[
grep("Comp", names(ge_met_est), invert = TRUE)]
ge_met_est = matrix(ge_met_est, nrow = v, ncol = pm, byrow = F)
g_met_est = rowMeans(ge_met_est)
cat("acc_g_met: ", output[output$Model == "FA1",]$acc_g_met <- cor(g_met_est,g_met_true))
cat("acc_g_tpe: ", output[output$Model == "FA1",]$acc_g_tpe <- cor(g_met_est,g_tpe_true))
cat("acc_ge_met: ", output[output$Model == "FA1",]$acc_ge_met <- mean(diag(cor(ge_met_est,ge_met_true))))
met_df$env
#-- Model 5: Factor analytic of order 1
asr.fa1 <- asreml(y.Trait1 ~ 1 + env,
random   = ~ rr(id, 1):env + diag(id):env + diag(env):block,
residual = ~ dsum(~ ar1(col):ar1(row) | env),
data = droplevels(met_df[met_df$env %in% c(13,32,75,84,186),]),
workspace = "2Gb")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
hm.palette
colour_palette
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
?scale_fill_gradient
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
ggplot2::scale_fill_gradient2(low = "#56B1F7", mid = "purple", high = "#132B43", space = "Lab", na.value = "grey50") +
ggplot2::scale_fill_gradient2(low = "#56B1F7", mid = "purple", high = "#132B43", space = "Lab", na.value = "grey50")
ggplot2::scale_fill_gradient2(low = "#56B1F7", mid = "purple", high = "#132B43", space = "Lab", na.value = "grey50")
ggplot2::scale_fill_gradient2(low = "#56B1F7", mid = "purple", high = "#132B43", space = "Lab", na.value = "grey50")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
gg_fill
?gg_fill
ggplot2::gg_fill
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ce[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ce[1:400,1:400],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:400,1:400],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:50,1:50],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ce,
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:50,1:50],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:50,1:50],
order = TRUE,
labels = FALSE)
plot_matrix(e[1:50,1:50],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:50,1:50],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:20,1:20],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:50,1:50],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ce[1:20,1:20],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:50,1:50],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:51,1:51],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ce[1:51,1:51],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:11,1:11],
order = TRUE,
labels = FALSE)
plot_matrix(Ce[1:10,1:10],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
# Plot the variance matrix using FieldSimR's functions plot_hist() and plot_matrix()
plot_hist(df = Ge[upper.tri(Ge)])
plot_matrix(Ge[1:10,1:10],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE) + ggplot2::scale_fill_gradientn(colours = colour_palette, na.value = "transparent", limits = colour_limits)
hm.palette <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(11, 'Spectral')), space='Lab')
colour_palette <- hm.palette(100)[c(1:45,50:100)]
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE) + ggplot2::scale_fill_gradientn(colours = colour_palette, na.value = "transparent", limits = colour_limits)
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE) + ggplot2::scale_fill_gradientn(colours = colour_palette, na.value = "transparent")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
colour_palette
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
colour_palette
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_matrix(Ge[1:20,1:20],
order = TRUE,
labels = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
