% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unstructured_gxe.R
\name{unstr_asr_output}
\alias{unstr_asr_output}
\title{Unstructured genotype-by-environment interaction model in AlphaSimR -
simulated genetic values}
\usage{
unstr_asr_output(pop, n_envs, n_reps, n_traits)
}
\arguments{
\item{pop}{An AlphaSimR population object
(\code{\link[AlphaSimR]{Pop-class}} or \code{\link[AlphaSimR]{HybridPop-class}})
 generated using \link[FieldSimR]{unstr_asr_input}.}

\item{n_envs}{Number of simulated environments (same as in \link[FieldSimR]{unstr_asr_input}.}

\item{n_reps}{A vector with the number of complete replicates in each
environment. If only one value is provided, then all environments will be assigned the same value.}

\item{n_traits}{Number of simulated traits (same as in \link[FieldSimR]{unstr_asr_input}.}
}
\value{
A data-frame containing environment number, replicate number, genotype
  ID and simulated genetic values for each trait.
}
\description{
Creates a data frame of correlated genetic values across multiple traits
and multiple environments based on an unstructured model for
genotype-by-environment (GxE) interaction. This function requires an AlphaSimR
population object that was generated using input parameters from
\link[FieldSimR]{unstr_asr_input}.
}
\examples{
# Simulation of genetic values for two additive + dominance traits in three environments in
# AlphaSimR based on an unstructured GxE interaction model.

# 1. Assign genetic architecture of traits.
# Mean genetic values and mean dominance degrees for trait 1 in 3 environments and trait 2 in
# 3 environments.
mean <- c(1, 3, 2, 80, 70, 100) # trait 1 by 3 envs, trait 2 by 3 envs.
mean_DD <- c(0.1, 0.4) # trait 1 and trait 2, same values assigned to all 3 envs for each trait.

# Additive genetic variances (usevarA = TRUE) and dominance degree variances for the two traits,
# that is assuming a separable structure between traits and environments.
T_var <- c(0.2, 10)
E_var <- c(0.5, 1, 1.5)

# Dominance degree variances for trait 1 in 3 environments and trait 2 in 3 environments, that
# is assuming a non-separable structure between traits and environments.
var_DD <- c(0.1, 0.15, 0.2, 0.2, 0.3, 0.2)


# Additive genetic correlations between traits.
T_cor_A <- matrix(c(1.0, 0.3,
                    0.3, 1.0),
                    ncol = 2)

# Additive genetic correlations between environments.
E_cor_A <- cov2cor(matrix(c(0.5, 0.4, 0.6,
                            0.4, 1.0, 0.5,
                            0.6, 0.5, 1.5),
                            ncol = 3))

# Dominance degree correlation between all six trait-by-environment combinations.
cor_DD <- diag(6) # assuming independence between traits

input_asr <- unstr_asr_input(n_envs = 3,
                             n_traits = 2,
                             mean = mean,
                             T_var = T_var,
                             E_var = E_var,
                             T_cor_A = T_cor_A,
                             E_cor_A = E_cor_A,
                             mean_DD = mean_DD,
                             var_DD = var_DD,
                             cor_DD = cor_DD)


# 2. Use input_asr to simulate genetic values in AlphaSimR based on an unstructured model for
# GxE interaction.

library(AlphaSimR)
FOUNDERPOP <- quickHaplo(nInd = 100,
                         nChr = 6,
                         segSites = 100)

SP <- SimParam$new(FOUNDERPOP)

SP$addTraitAD(nQtlPerChr = 100,
              mean = input_asr$mean,
              var = input_asr$var,
              meanDD = input_asr$mean_DD,
              varDD = input_asr$var_DD,
              corA = input_asr$cor_A,
              corDD = input_asr$cor_DD,
              useVarA = TRUE)

# Variance in var is used as additive variance.
# If FALSE, var = total genetic variance.

pop <- newPop(FOUNDERPOP)


# 3. Create a data frame containing the simulated genetic values for each of the two traits
# and three environments.

n_reps <- c(2, 3, 2) # Vector with the number of complete replicates in each environment

trial_df <- unstr_asr_output(pop = pop,
                             n_envs = 3,
                             n_reps = n_reps,
                             n_traits = 2)

}
