} else if (length(n_blocks) == n_envs) {
if (cols_alt == 1) {n_cols <- c(n_cols, (10 * n_blocks[r]))}
#if (cols_alt == 2) {n_cols <- c(n_cols, rep(10, n_envs) * n_blocks)}
}
} else {
stop("some block_dir error")
}
}
if(any(n_blocks == 1)) block_dir[n_blocks == 1] <- NA
### Error variances for traits 1 and 2 in the simulated environments
# tst <- rgamma(n = 10000, shape = 20, scale = 1)
# hist(tst, breaks = 100)
R_alt <- sample(1:2, 1)
# Vector of length n_traits -> same trait error variance for all environments
if (R_alt == 1) {
var_R <- rgamma(n = 1, shape = 2, scale = 1)
# if (n_traits > 1) {
#   for (t in 2:n_traits) {
#     R_T <- rgamma(n = 1, shape = sample(1:30, 1), scale = 1)
#     var_R <- c(var_R, R_T)
#   }
# }
}
# Vector of length n_traits*n_envs -> unique trait error variance for all environments
if (R_alt == 2) {
var_R <- rgamma(n = n_envs, shape = 2, scale = 1)
if (n_traits > 1) {
for (t in 2:n_traits) {
R_T <- rgamma(n = n_envs, shape = sample(1:30, 1), scale = 1)
var_R <- c(var_R, R_T)
}
}
}
### Randomly sampled correlations - assuming same correlation in all environments.
S_cor_R <- rand_cor_mat(n_traits, min_cor = -1 , pos_def = TRUE)
R_cor_R <- rand_cor_mat(n_traits, min_cor = -1 , pos_def = TRUE)
E_cor_R <- rand_cor_mat(n_traits, min_cor = -1 , pos_def = TRUE)
### Occasionally, rand_cor_mat fails to generate a symmetric matrix.
### If this happens, just jump to next cycle
S_sym <- matrixcalc::is.symmetric.matrix(S_cor_R)
R_sym <- matrixcalc::is.symmetric.matrix(R_cor_R)
E_sym <- matrixcalc::is.symmetric.matrix(E_cor_R)
sym_vec <- c(S_sym, R_sym, E_sym)
if (!all(sym_vec)) {
cycle_fails_symmetry <- cycle_fails_symmetry + 1
print("At least 1 error cor matrix not symmetric")
next
}
### Check matrices for being positive define
# S_pos <- matrixcalc::is.positive.definite(S_cor_R)  #, tol=1e-7)
# R_pos <- matrixcalc::is.positive.definite(R_cor_R)  #, tol=1e-7)
# E_pos <- matrixcalc::is.positive.definite(E_cor_R)  #, tol=1e-7)
# pos_vec <- c(S_pos, R_pos, E_pos)
#
# if (!all(pos_vec)) {
#   cycle_fails_posdef <- cycle_fails_posdef + 1
#   print("At least 1 error cor matrix not pos def")
#   next
# }
spatial_model <- c("Bivariate", "AR1:AR1")[sample(1:2, 1)]
#spatial_model <- "Bivariate"
complexity <- NULL                                                    # Complexity fixed to NULL
#complexity_alt <- sample(1:3, 1)     # complexity set to default for now.
# if (complexity_alt == 1) {complexity <- NULL}
# if (complexity_alt == 2) {complexity <- sample(10:50, 1)}
# if (complexity_alt == 3) {complexity <- sample(10:50, n_envs)}
# Plot length.
length_alt <- sample(2:3, 1)
# if length_alt == 1, the default value is used.
if (length_alt == 2) {plot_length <- runif(1, min = 0, max = 10)}
if (length_alt == 3) {plot_length <- runif(n_envs, min = 0, max = 10)}
# Plot width.
width_alt <- sample(2:3, 1)
# if width_alt == 1, the default value is used.
if (width_alt == 2) {plot_width <- runif(1, min = 0, max = 10)}
if (width_alt == 3) {plot_width <- runif(n_envs, min = 0, max = 10)}
col_cor_alt <- sample(2:3, 1)
# if col_cor_alt == 1, the default value is used.
if (col_cor_alt == 2) {col_cor <- runif(1)}
if (col_cor_alt == 3) {col_cor <- runif(n_envs)}
row_cor_alt <- sample(2:3, 1)
# if row_cor_alt == 1, the default value is used.
if (row_cor_alt == 2) {row_cor <- runif(1)}
if (row_cor_alt == 3) {row_cor <- runif(n_envs)}
# Proportion of systematic (spatial + extraneous) error to total error
prop_sys_alt <- sample(2:3, 1)
# if row_cor_alt == 1, the default value is used.
if (prop_sys_alt == 2) {
prop_sys <- runif(1)
sys_vals <- runif(1)
prop_spatial <- sys_vals * prop_sys
prop_ext <- (1 - sys_vals) * prop_sys
}
if (prop_sys_alt == 3) {
prop_sys <- runif(n_traits * n_envs)
sys_vals <- runif(n_traits * n_envs)
prop_spatial <- c(sys_vals) * prop_sys
prop_ext <- c(1 - sys_vals) * prop_sys
}
ext_dir_alt <- sample(2:8, 1)
# if ext_dir_alt == 1, the default value is used.
if (ext_dir_alt == 2) {ext_dir <- "row"}
if (ext_dir_alt == 3) {ext_dir <- "col"}
if (ext_dir_alt == 4) {ext_dir <- "both"}
if (ext_dir_alt == 5) {ext_dir <- rep("row", n_envs)}
if (ext_dir_alt == 6) {ext_dir <- rep("col", n_envs)}
if (ext_dir_alt == 7) {ext_dir <- rep("both", n_envs)}
if (ext_dir_alt == 8) {ext_dir <- sample(c("row", "col", "both"), n_envs, replace = TRUE)}
ext_ord_alt <- sample(2:3, 1)
# if ext_ord_alt == 1, the default value is used.
if (ext_ord_alt == 2) {ext_ord <- "random"}
if (ext_ord_alt == 3) {ext_ord <- "zig-zag"}
n_envs
block_dir
n_blocks
n_cols
n_rows
######################################################
####### RUN PLOT ERROR FUNCTION ######################
######################################################
#error_df <- try(
error_df <-
field_trial_error(
n_envs = n_envs,
n_traits = n_traits,
n_cols = n_cols,
n_rows = n_rows,
plot_length = plot_length,
plot_width = plot_width,
n_blocks = n_blocks,
block_dir = block_dir,
var_R = var_R,
S_cor_R = S_cor_R,
R_cor_R = R_cor_R,
E_cor_R = E_cor_R,
spatial_model = spatial_model,
prop_spatial = prop_spatial,
prop_ext = prop_ext,
#complexity = complexity,
col_cor = col_cor,
ext_ord = ext_ord,
return_effects = TRUE
)
#)
if(class(error_df)=="try-error") {
cycle_errors <- cycle_errors + 1
print("error in error_df")
next
}
print(paste(c("n_rows:", n_rows), collapse=" "))
print(paste(c("n_cols:", n_cols), collapse=" "))
######################################################
####### GENERATE PLOTS ###############################
######################################################
#
#   env_plot <- sample(1:n_envs, 1)
#   error_df_1 <- error_df$Trait.1
#   error_df_1 <- error_df_1[error_df_1$env == env_plot, ]
#
#   p1 <- plot_effects(error_df_1, effect = "e_spat")
#   p2 <- plot_effects(error_df_1, effect = "e_rand")
#   p3 <- plot_effects(error_df, effect = "e.Trait.1")
#   if (ext_dir == "col") p4 <- plot_effects(error_df_1, effect = "e_ext_col")
#   if (ext_dir == "row") p4 <- plot_effects(error_df_1, effect = "e_ext_row")
#   if (ext_dir == "both") {
#     p4 <- plot_effects(error_df_1, effect = "e_ext_col")
#     p5 <-plot_effects(error_df_1, effect = "e_ext_row")
#   }
#
#   if(exists("p5")) {
#     figure <- ggarrange(p1, p2, p3, p4, p5, ncol = 3, nrow = 2)
#   } else {
#     figure <- ggarrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
#   }
#
#   if (spatial_model == "AR1:AR1") {
#     png(paste0("plot_tests_loop/AR1/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
#
#
#   if (spatial_model == "Bivariate") {
#     png(paste0("plot_tests_loop/BV/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
######################################################
####### REMOVE SIMULATION PARAMETERS #################
######################################################
to_remove <- grep("^cycle", ls(),
invert = TRUE,
value = TRUE)
rm(list = c(to_remove, "to_remove"))
}
cycles_total <- 500
cycle_fails_symmetry <- cycle_fails_posdef <- cycle_errors <- 0
for (cycle in 1:cycles_total) {
print(paste0("cycle: ", cycle))
######################################################
####### DEFINE FUNCTION ARGUMENTS ####################
######################################################
### Sample values
nenvs <- sample(2:30, 1)     # Number of simulated environments.
ntraits <- sample(1:8, 1)    # Number of simulated traits.
### Sample nReps: set to max. 5 reps per location
rep_alt <- sample(2:3, 1)
# if rep_alt == 1, the default value is used.                                                # reconsider having a default value in the function.
if (rep_alt == 2) {nblocks <- sample(1:5, 1)}
if (rep_alt == 3) {nblocks <- sample(1:5, nenvs, replace = TRUE)}
dir_alt <- sample(4:6, 1)
# if rep_alt == 1, the default value is used.
#if (dir_alt == 2) {block_dir <- c("row")}
#if (dir_alt == 3) {block_dir <- c("col")}
if (dir_alt == 4) {block_dir <- rep("row", nenvs)}
if (dir_alt == 5) {block_dir <- rep("col", nenvs)}
if (dir_alt == 6) block_dir <- sample(c("row", "col"), nenvs, replace = TRUE)
rows_alt <- 1 #sample(1:, 1)
cols_alt <- 1 #sample(1:2, 1)
ncols <- vector()
nrows <- vector()
for (r in 1:nenvs) {
if (is.na(block_dir[r])) {
ncols <- c(ncols, sample(4:40, 1))
nrows <- c(nrows, sample(4:40, 1))
} else if (block_dir[r] == "row") {
# Total number of columns in each environment.
if (cols_alt == 1) {ncols <- c(ncols, sample(4:40, 1))}
#if (cols_alt == 2) {ncols <- c(ncols, sample(4:40, nenvs, replace = TRUE))}
# Total number of rows in each environment.
if (length(nblocks) == 1) {
if (rows_alt == 1) {nrows <- c(nrows, (10 * nblocks))}
#if (rows_alt == 2) {nrows <- c(nrows, rep(10, nenvs) * nblocks)}
} else if (length(nblocks) == nenvs) {
if (rows_alt == 1) {nrows <- c(nrows, (10 * nblocks[r]))}
#if (rows_alt == 2) {nrows <- c(nrows, rep(10, nenvs) * nblocks)}
}
} else if (block_dir[r] == "col") {
# Total number of columns in each environment.
if (rows_alt == 1) {nrows <- c(nrows, sample(4:40, 1))}
#if (rows_alt == 2) {nrows <- c(nrows, sample(4:40, nenvs, replace = TRUE))}
# Total number of rows in each environment.
if (length(nblocks) == 1) {
if (cols_alt == 1) {ncols <- c(ncols, (10 * nblocks))}
#if (cols_alt == 2) {ncols <- c(ncols, rep(10, nenvs) * nblocks)}
} else if (length(nblocks) == nenvs) {
if (cols_alt == 1) {ncols <- c(ncols, (10 * nblocks[r]))}
#if (cols_alt == 2) {ncols <- c(ncols, rep(10, nenvs) * nblocks)}
}
} else {
stop("some block_dir error")
}
}
if(any(nblocks == 1)) block_dir[nblocks == 1] <- NA
### Error variances for traits 1 and 2 in the simulated environments
# tst <- rgamma(n = 10000, shape = 20, scale = 1)
# hist(tst, breaks = 100)
R_alt <- sample(1:2, 1)
# Vector of length ntraits -> same trait error variance for all environments
if (R_alt == 1) {
var_R <- rgamma(n = 1, shape = 2, scale = 1)
# if (ntraits > 1) {
#   for (t in 2:ntraits) {
#     R_T <- rgamma(n = 1, shape = sample(1:30, 1), scale = 1)
#     var_R <- c(var_R, R_T)
#   }
# }
}
# Vector of length ntraits*nenvs -> unique trait error variance for all environments
if (R_alt == 2) {
var_R <- rgamma(n = nenvs, shape = 2, scale = 1)
if (ntraits > 1) {
for (t in 2:ntraits) {
R_T <- rgamma(n = nenvs, shape = sample(1:30, 1), scale = 1)
var_R <- c(var_R, R_T)
}
}
}
### Randomly sampled correlations - assuming same correlation in all environments.
S_cor_R <- rand_cor_mat(ntraits, min_cor = -1 , pos_def = TRUE)
R_cor_R <- rand_cor_mat(ntraits, min_cor = -1 , pos_def = TRUE)
E_cor_R <- rand_cor_mat(ntraits, min_cor = -1 , pos_def = TRUE)
### Occasionally, rand_cor_mat fails to generate a symmetric matrix.
### If this happens, just jump to next cycle
S_sym <- matrixcalc::is.symmetric.matrix(S_cor_R)
R_sym <- matrixcalc::is.symmetric.matrix(R_cor_R)
E_sym <- matrixcalc::is.symmetric.matrix(E_cor_R)
sym_vec <- c(S_sym, R_sym, E_sym)
if (!all(sym_vec)) {
cycle_fails_symmetry <- cycle_fails_symmetry + 1
print("At least 1 error cor matrix not symmetric")
next
}
### Check matrices for being positive define
# S_pos <- matrixcalc::is.positive.definite(S_cor_R)  #, tol=1e-7)
# R_pos <- matrixcalc::is.positive.definite(R_cor_R)  #, tol=1e-7)
# E_pos <- matrixcalc::is.positive.definite(E_cor_R)  #, tol=1e-7)
# pos_vec <- c(S_pos, R_pos, E_pos)
#
# if (!all(pos_vec)) {
#   cycle_fails_posdef <- cycle_fails_posdef + 1
#   print("At least 1 error cor matrix not pos def")
#   next
# }
spatial_model <- c("Bivariate", "AR1:AR1")[sample(1:2, 1)]
#spatial_model <- "Bivariate"
complexity <- NULL                                                    # Complexity fixed to NULL
#complexity_alt <- sample(1:3, 1)     # complexity set to default for now.
# if (complexity_alt == 1) {complexity <- NULL}
# if (complexity_alt == 2) {complexity <- sample(10:50, 1)}
# if (complexity_alt == 3) {complexity <- sample(10:50, nenvs)}
# Plot length.
length_alt <- sample(2:3, 1)
# if length_alt == 1, the default value is used.
if (length_alt == 2) {plot_length <- runif(1, min = 0, max = 10)}
if (length_alt == 3) {plot_length <- runif(nenvs, min = 0, max = 10)}
# Plot width.
width_alt <- sample(2:3, 1)
# if width_alt == 1, the default value is used.
if (width_alt == 2) {plot_width <- runif(1, min = 0, max = 10)}
if (width_alt == 3) {plot_width <- runif(nenvs, min = 0, max = 10)}
col_cor_alt <- sample(2:3, 1)
# if col_cor_alt == 1, the default value is used.
if (col_cor_alt == 2) {col_cor <- runif(1)}
if (col_cor_alt == 3) {col_cor <- runif(nenvs)}
row_cor_alt <- sample(2:3, 1)
# if row_cor_alt == 1, the default value is used.
if (row_cor_alt == 2) {row_cor <- runif(1)}
if (row_cor_alt == 3) {row_cor <- runif(nenvs)}
# Proportion of systematic (spatial + extraneous) error to total error
prop_sys_alt <- sample(2:3, 1)
# if row_cor_alt == 1, the default value is used.
if (prop_sys_alt == 2) {
prop_sys <- runif(1)
sys_vals <- runif(1)
prop_spatial <- sys_vals * prop_sys
prop_ext <- (1 - sys_vals) * prop_sys
}
if (prop_sys_alt == 3) {
prop_sys <- runif(ntraits * nenvs)
sys_vals <- runif(ntraits * nenvs)
prop_spatial <- c(sys_vals) * prop_sys
prop_ext <- c(1 - sys_vals) * prop_sys
}
ext_dir_alt <- sample(2:8, 1)
# if ext_dir_alt == 1, the default value is used.
if (ext_dir_alt == 2) {ext_dir <- "row"}
if (ext_dir_alt == 3) {ext_dir <- "col"}
if (ext_dir_alt == 4) {ext_dir <- "both"}
if (ext_dir_alt == 5) {ext_dir <- rep("row", nenvs)}
if (ext_dir_alt == 6) {ext_dir <- rep("col", nenvs)}
if (ext_dir_alt == 7) {ext_dir <- rep("both", nenvs)}
if (ext_dir_alt == 8) {ext_dir <- sample(c("row", "col", "both"), nenvs, replace = TRUE)}
ext_ord_alt <- sample(2:3, 1)
# if ext_ord_alt == 1, the default value is used.
if (ext_ord_alt == 2) {ext_ord <- "random"}
if (ext_ord_alt == 3) {ext_ord <- "zig-zag"}
nenvs
block_dir
nblocks
ncols
nrows
######################################################
####### RUN PLOT ERROR FUNCTION ######################
######################################################
#error_df <- try(
error_df <-
field_trial_error(
nenvs = nenvs,
ntraits = ntraits,
ncols = ncols,
nrows = nrows,
plot_length = plot_length,
plot_width = plot_width,
nblocks = nblocks,
block_dir = block_dir,
var_R = var_R,
S_cor_R = S_cor_R,
R_cor_R = R_cor_R,
E_cor_R = E_cor_R,
spatial_model = spatial_model,
prop_spatial = prop_spatial,
prop_ext = prop_ext,
#complexity = complexity,
col_cor = col_cor,
ext_ord = ext_ord,
return_effects = TRUE
)
#)
if(class(error_df)=="try-error") {
cycle_errors <- cycle_errors + 1
print("error in error_df")
next
}
print(paste(c("nrows:", nrows), collapse=" "))
print(paste(c("ncols:", ncols), collapse=" "))
######################################################
####### GENERATE PLOTS ###############################
######################################################
#
#   env_plot <- sample(1:nenvs, 1)
#   error_df_1 <- error_df$Trait.1
#   error_df_1 <- error_df_1[error_df_1$env == env_plot, ]
#
#   p1 <- plot_effects(error_df_1, effect = "e_spat")
#   p2 <- plot_effects(error_df_1, effect = "e_rand")
#   p3 <- plot_effects(error_df, effect = "e.Trait.1")
#   if (ext_dir == "col") p4 <- plot_effects(error_df_1, effect = "e_ext_col")
#   if (ext_dir == "row") p4 <- plot_effects(error_df_1, effect = "e_ext_row")
#   if (ext_dir == "both") {
#     p4 <- plot_effects(error_df_1, effect = "e_ext_col")
#     p5 <-plot_effects(error_df_1, effect = "e_ext_row")
#   }
#
#   if(exists("p5")) {
#     figure <- ggarrange(p1, p2, p3, p4, p5, ncol = 3, nrow = 2)
#   } else {
#     figure <- ggarrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
#   }
#
#   if (spatial_model == "AR1:AR1") {
#     png(paste0("plot_tests_loop/AR1/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
#
#
#   if (spatial_model == "Bivariate") {
#     png(paste0("plot_tests_loop/BV/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
######################################################
####### REMOVE SIMULATION PARAMETERS #################
######################################################
to_remove <- grep("^cycle", ls(),
invert = TRUE,
value = TRUE)
rm(list = c(to_remove, "to_remove"))
}
save.image()
library(devtools)
library(available)
library(styler)
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
styler::style_pkg() # see changes with git diff <file path>
styler::style_pkg() # see changes with git diff <file path>
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
document()
check()
?heatmap
heatmap
document()
check()
?is.positive.definite
check()
check()
document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
# Create checklist
usethis::use_release_issue()
# Create checklist
usethis::use_release_issue()
## Most recent recommended testing pipeline
devtools::spell_check()
urlchecker::url_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran(email = "c.werner@cgiar.org", platforms = "debian-gcc-devel")
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
devtools::check_rhub() # Used for cran-comments.md
library(revdepcheck)
install.packages("revdepcheck")
urlchecker::url_check()
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
# Create checklist
usethis::use_release_issue()
?gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
# Create checklist
usethis::use_release_issue()
# Create checklist
usethis::use_release_issue()
?fieldsimr
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
require(FieldSimR)
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
