[{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://crwerner.github.io/fieldsimr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"document demonstrates simulate genetic values multiple traits multiple environments using compound symmetry model genotype--environment (GxE) interaction, assuming separable structure traits environments. simulation genetic values directly implemented ‘FieldSimR’, package provides wrapper functions facilitate simulation genetic values multi-environment field trial settings employing R package ‘AlphaSimR’. two wrapper functions simulate genetic values based compound symmetry GxE interaction model : compsym_asr_input() compsym_asr_output()  Note: ‘FieldSimR’ also provides wrapper functions enable simulation genetic values using unstructured model genotype--environment (GxE) interaction. demonstrated vignette Simulation genetic values using unstructured model genotype--environment (GxE) interaction. core function ‘FieldSimR’ generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1). combination plot errors (simulated) genetic values, ‘FieldSimR’ enables simulation multi-environment plant breeding trials plot. demonstrated vignette Simulation plot errors phenotypes multi-environment plant breeding trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"simulation-of-genetic-values","dir":"Articles","previous_headings":"","what":"Simulation of genetic values","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three locations. first third location include two replicated, second location includes three replicates simulation process comprises three steps: Definition genetic architecture simulation parameters two traits. Simulation population 100 hybrid genotypes. Generation data frame containing simulated genetic values grain yield plant height three environments.. provide comprehensive overview compound symmetry modelling approach GxE interaction, assume additive dominance gene action grain yield plant height. Details ‘AlphaSimR’ simulates additive non-additive biological effects can found “Traits AlphaSimR” vignette. noted, however, simple additive genetic model sufficient answer experimental questions may preferred complex models, especially data tune simulation model available parameters unknown.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"genetic-architecture-and-simulation-parameters-of-the-two-traits","dir":"Articles","previous_headings":"","what":"1. Genetic architecture and simulation parameters of the two traits","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"First, set number traits, number environments (e.g., locations), number replicates tested within environments. also define number genotypes founder population simulated, number chromosomes, number segregating sites (biallelic QTN) per chromosome. , set additive genetic parameters, dominance parameters, genetic correlation structures required simulate two traits three environments based compound symmetry model GxE interaction. create founder population 20 heterozygous genotypes. founder genotypes split two heterotic pools, one doubled haploid (DH) line produced founder. generate hybrids, two pools crossed using factorial design.","code":"n_traits <- 2 # Number of traits. n_envs <- 3 # Number of environments (locations). n_reps <- c(2, 3, 2) # Number of replicates tested within environments 1, 2 and 3.   n_ind <- 100 # Number of founder genotypes in the population. n_chr <- 10 # Number of chromosomes. n_seg_sites <- 200 # Number of QTN per chromosome."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"additive-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Additive genetic parameters","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"define mean additive genetic values trait x environment combinations. additive mean values provided single vector environments nested within traits. Grain yield measured tons per hectare (t/ha) plant height measured centimetres (cm).  Simulated traits restricted compound symmetry model variance environment (main effect variance + GxE interaction variance) covariance pair environments (main effect variance).  relative magnitude additive main effect variance relative additive main effect + GxE interaction variance trait also defines additive genetic correlation environments compound symmetry model.  Additive genetic correlations two traits set 2x2 correlation matrix.","code":"mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) var <- c(0.08, 13) # c(grain yield, plant height) rel_main_eff_A <- c(0.4, 0.6) # c(grain yield, plant height) cor_A <- matrix( # Matrix of additive genetic correlations grain yield and plant height.   c(     1.0, 0.5,     0.5, 1.0   ),   ncol = 2 ) #>      [,1] [,2] #> [1,]  1.0  0.5 #> [2,]  0.5  1.0"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"dominance-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Dominance genetic parameters","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"Dominance degrees dominance degree variances two traits defined way. assume independence dominance degrees grain yield plant height. Therefore, generate 2x2 diagonal matrix (although strictly necessary. diagonal matrix constructed default correlation matrix provided).","code":"mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)  var_DD <- c(0.2, 0.2) # c(grain yield, plant height)  rel_main_eff_DD <- 0.4 # Same value set for traits 1 and 2.  cor_DD <- diag(2) #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"input-parameter-list","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Input parameter list","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"defined simulation parameters, use function compsym_asr_input() prepare list used ‘AlphaSimR’ simulate correlated genetic values based compound symmetry model GxE interaction. Note: output object input_asr modified must used directly ‘AlphaSimR’ demonstrated .","code":"input_asr <- compsym_asr_input(   n_envs = n_envs,   n_traits = n_traits,   mean = mean,   var = var,   rel_main_eff_A = rel_main_eff_A,   cor_A = cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   rel_main_eff_DD = rel_main_eff_DD,   cor_DD = cor_DD )"},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"simulation-of-a-population-of-genotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of a population of genotypes","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"list simulation parameters input_asr now used ‘AlphaSimR’ simulate correlated genetic values 100 maize hybrid genotypes tested two traits three locations based compound symmetry model GxE interaction. First, simulate population 20 heterozygous maize founder genotypes using function runMacs ‘AlphaSimR’.  , use simulation parameters stored input_asr simulate correlated genetic values grain yield plant height three testing environments.  now split simulated founders two heterotic pools B. create one DH line per founder, gives us 10 DH lines per heterotic pool. Hybrids generated crossing pool pool B factorial manner (pairwise combinations), resulting 100 hybrid genotypes","code":"founders <- runMacs( # Simulation of founder genotypes using AlphaSimR's \"MAIZE\" presets   nInd = n_ind, # to mimic the species' evolutionary history.   nChr = n_chr,   segSites = n_seg_sites,   species = \"MAIZE\" )  SP <- SimParam$new(founders) SP$addTraitAD( # Additive + dominance trait simulation.   nQtlPerChr = n_seg_sites,   mean = input_asr$mean,   var = input_asr$var,   meanDD = input_asr$mean_DD,   varDD = input_asr$var_DD,   corA = input_asr$cor_A,   corDD = input_asr$cor_DD,   useVarA = FALSE )  founders <- newPop(founders) pool_A <- makeDH(founders[1:10], nDH = 1) # Pool A: 1 DH line from founders 1 to 10, respectively. pool_B <- makeDH(founders[11:20], nDH = 1) # Pool B: 1 DH line from founders 11 to 20, respectively.  dh_lines <- mergePops(list(pool_A, pool_B))  factorial_plan <- as.matrix(expand.grid(A = pool_A@id, B = pool_B@id)) # Factorial crossing plan.  hybrid_pop <- makeCross(pop = dh_lines, crossPlan = factorial_plan, nProgeny = 1) # Hybrid genotypes."},{"path":"https://crwerner.github.io/fieldsimr/articles/compound_symmetry_GxE_demo.html","id":"generation-of-a-data-frame-with-simulated-genetic-values","dir":"Articles","previous_headings":"","what":"3. Generation of a data frame with simulated genetic values","title":"Simulation of genetic values using a compound symmetry model for genotype-by-environment (GxE) interaction","text":"last step, use function compsym_asr_output() extract simulated genetic values ‘AlphaSimR’ population object hybrid_pop store data frame.  Histogram showing genetic values 100 maize hybrids grain yield three environments   simulated genetic values grain yield protein content measured three locations can now combined plot errors generate plant breeding trial phenotype data plot. provide example RMARKDOWN(LINK).","code":"gv_df <- compsym_asr_output(   pop = hybrid_pop,   n_envs = n_envs,   n_reps = n_reps,   n_traits = n_traits ) #>   env rep  id gv.Trait.1 gv.Trait.2 #> 1   1   1 121   5.222587   236.6742 #> 2   1   1 122   4.859153   234.2791 #> 3   1   1 123   4.376781   230.0529 #> 4   1   1 124   4.501614   232.9091 #> 5   1   1 125   4.445231   232.6577 #> 6   1   1 126   4.789754   235.6450 ggplot(gv_df, aes(x = gv.Trait.1, fill = factor(env))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Genetic values for grain yield (t/ha)\", y = \"Count\", fill = \"Environment\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"R package ‘FieldSimR’ enables simulation multi-environment plant breeding trial phenotypes simulation plot errors subsequent combination (simulated) genetic values. core function generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1).three error terms combined user-deﬁned ratio. document demonstrates : Simulate plot errors multiple traits tested multiple environments, Simulate phenotypes combination plot errors simulated genetic values.  simulation plot errors requires specification various simulation parameters define: field trial layout total error variance spatial error Extraneous variation  Phenotypes simulated combination plot errors genetic values stored package’s example data frame df_gv_unstr. data frame contains simulated genetic values two traits three environments based unstructured model genotype--environment (GxE) interaction. simulation genetic values shown vignette Simulation genetic values using unstructured model genotype--environment (GxE) interaction.","code":""},{"path":[]},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"field-trial-layout","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.1 Field trial layout","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three locations. first third location include two blocks, second location includes three blocks. block comprises 20 rows 5 columns. blocks arranged column direction (“side--side”). plot length (column direction) 8 meters, plot width (row direction) 2 meters. Note: plot_length plot_width required spatial_model = \"Bivariate\". two arguments used set x-coordinates y-coordinates required bivariate interpolation algorithm model spatial correlation plots. Therefore, assumed unit length (meters ) actual meaning, ratio plot_length plot_width important rather absolute values. recommend use realistic, absolute values plot_length plot_width regardless unit length. spatially correlated errors simulated based two-dimensional autoregressive process (AR1:AR1), col_cor row_cor defined instead.","code":"n_envs <- 3 # Number of environments. n_traits <- 2 # Number of traits. n_blocks <- c(2, 3, 2) # Number of blocks in the three environments, respectively. block_dir <- \"col\" # Layout of blocks (“side-by-side”). n_cols <- c(10, 15, 10) # Total umber of columns per location. n_rows <- 20 # Total number of rows per location. plot_length <- 8 # Plot length; here in meters (column direction). plot_width <- 2 # Plot width; here in meters (row direction)."},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"total-error","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.2 Total error","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"obtain pre-defined target heritabilities plot-level, need define total error variances two simulated traits relative genetic variances. assume broad-sense heritabilities plot level H2 = 0.1 grain yield H2 = 0.3 plant height three locations. heritabilities six trait x environment combinations stored single vector.  total genetic variances six trait x environment combinations (environments nested within traits) can extracted description simulation genetic values FieldSimR::unstructured_GxE_demo.  now create simple function calculate total error variances based pre-defined target heritabilities vector H2and total genetic variances var.","code":"H2 <- c(0.1, 0.1, 0.1, 0.3, 0.3, 0.3) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) var <- c(0.085, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) # Calculation of error variances based on the genetic variance and target heritability vectors. calc_var_R <- function(var, H2) {   varR <- (var / H2) - var   return(varR) }  var_R <- calc_var_R(var, H2) var_R # Vector of error variances: c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) #> [1]  0.76500  1.08000  0.54000 35.23333 19.83333 27.30000"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"spatial-error","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.3 Spatial error","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"simulate spatial error term using bivariate interpolation assume proportion spatial error variance total error variance 0.4 three environments. Additionally, assume correlation spatial error two traits. However, since information magnitude correlation, randomly sample value 0 0.5.","code":"spatial_model <- \"Bivariate\" # Spatial error model. prop_spatial <- 0.4 # Proportion of spatial to total error variance.  S_cor_R <- rand_cor_mat(n_traits, min_cor = 0, max_cor = 0.5, pos_def = TRUE) S_cor_R #>          [,1]     [,2] #> [1,] 1.000000 0.435865 #> [2,] 0.435865 1.000000"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"extraneous-variation","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.4 Extraneous variation","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"Extraneous effects can, example, result trial management procedures row /column direction, soil tillage, sowing harvesting. want simulate extraneous variation row direction assume proportion extraneous error variance total error variance 0.2. correlation neighbouring rows assumed highly negative value sampled uniform distribution. also assume correlation error two traits extraneous variation randomly sample value 0 0.5. Note: proportion random error variance total error variance defined 1 - (prop_spatial + prop_ext). Hence, prop_spatial prop_ext set reference random error, sum two proportions must greater 1.","code":"prop_ext <- 0.2 ext_dir <- \"row\" ext_row_cor <- runif(1, min = -0.9, max = -0.6) ext_row_cor #> [1] -0.6035327  E_cor_R <- rand_cor_mat(n_traits, min_cor = 0, max_cor = 0.5, pos_def = TRUE) E_cor_R #>           [,1]      [,2] #> [1,] 1.0000000 0.2480693 #> [2,] 0.2480693 1.0000000"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"simulation-of-plot-errors-1","dir":"Articles","previous_headings":"1. Simulation of plot errors","what":"1.5 Simulation of plot errors","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"Finally, use parameters defined function field_trial_error() simulate plot errors grain yield plant height three test locations: Note: default, function field_trial_error() generates data frame following columns: environment id (location), block id, column id, row id, total plot error trait. return_effects = TRUE, ‘FieldSimR’ returns list additional entry trait containing spatial error, extraneous effect random error.  now plot total error grain yield (“e.Trait.1”) environment 2, well spatial error component, random error component, extraneous variation. Therefore, first extract required data error_df create individual plot four simulated error terms.  Total plot error   Spatial error simulated using bivariate interpolation   Random error   Extraneous variation row direction","code":"error_df <- field_trial_error(   n_envs = n_envs,   n_traits = n_traits,   n_blocks = n_blocks,   block_dir = block_dir,   n_cols = n_cols,   n_rows = n_rows,   plot_length = plot_length,   plot_width = plot_width,   var_R = var_R,   R_cor_R = NULL,   spatial_model = spatial_model,   prop_spatial = prop_spatial,   S_cor_R = S_cor_R,   prop_ext = prop_ext,   ext_dir = ext_dir,   ext_row_cor = ext_row_cor,   E_cor_R = E_cor_R,   return_effects = TRUE ) error_env2 <- error_df$plot_df[error_df$plot_df$env == 2, ] e_comp_env2 <- error_df$Trait.1[error_df$Trait.1$env == 2, ] plot_effects(error_env2, effect = \"e.Trait.1\") plot_effects(e_comp_env2, effect = \"e_spat\") plot_effects(e_comp_env2, effect = \"e_rand\") plot_effects(e_comp_env2, effect = \"e_ext_row\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/spatial_error_demo.html","id":"simulation-of-plot-level-phenotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of plot-level phenotypes","title":"Simulation of plot errors and phenotypes for a multi-environment plant breeding trial","text":"simulate grain yield plant height phenotypes multi-environment maize experiment, now combine simulated plot errors genetic values stored example data frame df_gv_unstr. done using function pheno_df(), supports random allocation genotypes plots within blocks, simulating randomized complete block design (RCBD). Note: complex field designs require allocation genotypes plots using external R package software.  Simulated phenotypes   Histogram showing genetic phenotypes 100 maize hybrids grain yield three blocks environment 2","code":"gv_df <- df_gv_unstr  pheno_df <- make_phenotypes(   gv_df,   error_df$plot_df,   randomise = TRUE )  pheno_env2 <- pheno_df[pheno_df$env == 2, ] # Extract phenotypes in environment 2. plot_effects(pheno_env2, effect = \"phe.Trait.1\") ggplot(pheno_env2, aes(x = phe.Trait.1, fill = factor(block))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Genetic values for grain yield (t/ha)\", y = \"Count\", fill = \"Block\")"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"document demonstrates simulate genetic values multiple traits multiple environments using unstructured model genotype--environment (GxE) interaction. simulation genetic values directly implemented ‘FieldSimR’, package provides wrapper functions facilitate simulation genetic values multi-environment field trial settings employing R package ‘AlphaSimR’. two wrapper functions simulate genetic values based unstructured model GxE interaction : unstr_asr_input() unstr_asr_output()  Note: ‘FieldSimR’ also provides wrapper functions enable simulation genetic values using compound symmetry model GxE interaction. demonstrated vignette Simulation genetic values using compound symmetry model genotype--environment (GxE) interaction. core function ‘FieldSimR’ generates plot errors comprising 1) spatially correlated error term, 2) random error term, 3) extraneous error term. Spatially correlated errors simulated using either bivariate interpolation, two-dimensional autoregressive process order one (AR1:AR1). combination plot errors (simulated) genetic values, ‘FieldSimR’ enables simulation multi-environment plant breeding trials plot. demonstrated vignette Simulation plot errors phenotypes multi-environment plant breeding trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"simulation-of-genetic-values","dir":"Articles","previous_headings":"","what":"Simulation of genetic values","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"conceive scenario 100 maize hybrids measured grain yield (t/ha) plant height (cm) three locations. first third location include two replicates, third location includes three replicates. simulation process comprises three steps: Definition genetic architecture simulation parameters two traits. Simulation population 100 hybrid genotypes. Generation data frame containing simulated genetic values grain yield plant height three environments. provide comprehensive overview unstructured modelling approach GxE interaction, assume additive dominance gene action grain yield plant height. Details ‘AlphaSimR’ simulates additive non-additive biological effects can found “Traits AlphaSimR” vignette. noted, however, simple additive genetic model sufficient answer experimental questions may preferred complex models, especially data tune simulation model available parameters unknown.","code":""},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"genetic-architecture-and-simulation-parameters-of-the-two-traits","dir":"Articles","previous_headings":"","what":"1. Genetic architecture and simulation parameters of the two traits","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"First, set number traits, number environments (e.g., locations), number replicates tested within environments. also define number genotypes founder population simulated, number chromosomes, number segregating sites (biallelic QTN) per chromosome. , set additive genetic parameters, dominance parameters, genetic correlation structures required simulate two traits three environments based unstructured model GxE interaction. create founder population 20 heterozygous genotypes. founder genotypes split two heterotic pools, one doubled haploid (DH) line produced founder. generate hybrids, two pools crossed using factorial design.","code":"n_traits <- 2 # Number of traits. n_envs <- 3 # Number of environments (locations). n_reps <- c(2, 3, 2) # Number of replicates tested within environments 1, 2 and 3.   n_ind <- 20 # Number of founder genotypes in the population. n_chr <- 10 # Number of chromosomes. n_seg_sites <- 300 # Number of QTN per chromosome."},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"additive-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Additive genetic parameters","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"define mean additive genetic values trait x environment combinations. additive mean values provided single vector environments nested within traits. Grain yield measured tons per hectare (t/ha) plant height measured centimetres (cm).  additive variances six trait x environment combinations can set two different ways. providing single vector environments nested within traits (similar vector mean). providing vector genetic variances two traits (T_var) second vector genetic variances three environments (E_var), assuming separable structure. choose first option provide single vector variances.","code":"mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # c(Yld:E1, Yld:E2, Yld:E3, Prt:E1, Prt:E2, Prt:E3) var <- c(0.085, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"dominance-genetic-parameters","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Dominance genetic parameters","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"assume mean dominance degrees 0.4 grain yield 0.1 plant height three environments, respectively. dominance degree variance set 0.2 traits three environments.","code":"mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3) var_DD <- rep(0.2, 6)"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"genetic-correlation-structures","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Genetic correlation structures","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"Additive non-additive genetic correlations trait x environment combinations can defined two ways: providing single correlation structure (cor_A). providing matrix genetic correlations traits (T_cor_A) matrix genetic correlations environments (E_cor_A), assuming separable correlation structure. choose second option assume separable additive genetic correlation structure. simplifies generation additive correlation matrix, especially number environments /traits high.  Alternatively, function rand_cor_mat() provides quick means generate random correlation matrices. correlations sampled within defined range values.  Furthermore, assume independence dominance degrees six trait--environment combinations. Therefore, generate 6x6 diagonal matrix (although strictly necessary. diagonal matrix constructed default correlation matrix provided).","code":"T_cor_A <- matrix( # Matrix of additive genetic correlations between the two traits.   c(     1.0, 0.6,     0.6, 1.0   ),   ncol = 2 ) #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 E_cor_A <- matrix(   c( # Matrix of additive genetic correlations between the three environments.     1.0, 0.4, 0.6,     0.4, 1.0, 0.5,     0.6, 0.5, 1.0   ),   ncol = 3 ) #>      [,1] [,2] [,3] #> [1,]  1.0  0.4  0.6 #> [2,]  0.4  1.0  0.5 #> [3,]  0.6  0.5  1.0 cor_A <- rand_cor_mat( # Additive genetic correlation structure.   (n_traits * n_envs), # Could be used instead of T_cor_A and E_cor_A.   min_cor = 0.1,   max_cor = 0.9,   pos_def = TRUE )  round(cor_A, 2) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,] 1.00 0.35 0.35 0.70 0.50 0.25 #> [2,] 0.35 1.00 0.44 0.53 0.39 0.84 #> [3,] 0.35 0.44 1.00 0.17 0.12 0.32 #> [4,] 0.70 0.53 0.17 1.00 0.30 0.74 #> [5,] 0.50 0.39 0.12 0.30 1.00 0.33 #> [6,] 0.25 0.84 0.32 0.74 0.33 1.00 cor_DD <- diag(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    0    0    0 #> [2,]    0    1    0    0    0    0 #> [3,]    0    0    1    0    0    0 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    0 #> [6,]    0    0    0    0    0    1"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"input-parameter-list","dir":"Articles","previous_headings":"1. Genetic architecture and simulation parameters of the two traits","what":"Input parameter list","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"defined simulation parameters, use function unstr_asr_input() prepare list used ‘AlphaSimR’ simulate correlated genetic values based unstructured model GxE interaction. Note: output object input_asr modified must used directly ‘AlphaSimR’ demonstrated .","code":"input_asr <- unstr_asr_input(   n_envs = n_envs,   n_traits = n_traits,   mean = mean,   var = var,   T_cor_A = T_cor_A,   E_cor_A = E_cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   cor_DD = cor_DD )"},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"simulation-of-a-population-of-genotypes","dir":"Articles","previous_headings":"","what":"2. Simulation of a population of genotypes","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"list simulation parameters input_asr now used ‘AlphaSimR’ simulate correlated genetic values 100 maize hybrid genotypes tested two traits three locations based unstructured model GxE interaction. First, simulate population 20 heterozygous maize founder genotypes using function runMacs ‘AlphaSimR’.  , use simulation parameters stored input_asr simulate correlated genetic values grain yield plant height three testing environments.  now split simulated founders two heterotic pools B. create one DH line per founder, gives us 10 DH lines per heterotic pool. Hybrids generated crossing pool pool B factorial manner (pairwise combinations), resulting 100 hybrid genotypes","code":"founders <- runMacs( # Simulation of founder genotypes using AlphaSimR's \"MAIZE\" presets   nInd = n_ind, # to mimic the species' evolutionary history.   nChr = n_chr,   segSites = n_seg_sites,   inbred = FALSE,   species = \"MAIZE\" )  SP <- SimParam$new(founders) SP$addTraitAD( # Additive + dominance trait simulation.   nQtlPerChr = n_seg_sites,   mean = input_asr$mean,   var = input_asr$var,   meanDD = input_asr$mean_DD,   varDD = input_asr$var_DD,   corA = input_asr$cor_A,   corDD = input_asr$cor_DD,   useVarA = FALSE )  founders <- newPop(founders) pool_A <- makeDH(founders[1:10], nDH = 1) # Pool A: 1 DH line from founders 1 to 10, respectively. pool_B <- makeDH(founders[11:20], nDH = 1) # Pool B: 1 DH line from founders 11 to 20, respectively.  dh_lines <- mergePops(list(pool_A, pool_B))  factorial_plan <- as.matrix(expand.grid(A = pool_A@id, B = pool_B@id)) # Factorial crossing plan.  hybrid_pop <- makeCross(pop = dh_lines, crossPlan = factorial_plan, nProgeny = 1) # Hybrid genotypes."},{"path":"https://crwerner.github.io/fieldsimr/articles/unstructured_GxE_demo.html","id":"generation-of-a-data-frame-with-simulated-genetic-values","dir":"Articles","previous_headings":"","what":"3. Generation of a data frame with simulated genetic values","title":"Simulation of genetic values using an unstructured model for genotype-by-environment (GxE) interaction","text":"last step, use function unstr_asr_output() extract simulated genetic values ‘AlphaSimR’ population object hybrid_pop store data frame.  Histogram showing genetic values 100 maize hybrids grain yield three environments   simulated genetic values grain yield plant height measured three locations can now combined plot errors generate plant breeding trial phenotype plot data. provide example RMARKDOWN(LINK).","code":"gv_df <- unstr_asr_output(   pop = hybrid_pop,   n_envs = n_envs,   n_reps = n_reps,   n_traits = n_traits ) #>   env rep id gv.Trait.1 gv.Trait.2 #> 1   1   1 41   4.717163   234.7503 #> 2   1   1 42   4.703194   236.3822 #> 3   1   1 43   4.622249   231.9610 #> 4   1   1 44   5.211618   240.6363 #> 5   1   1 45   4.883201   235.6828 #> 6   1   1 46   5.159755   241.8371 ggplot(gv_df, aes(x = gv.Trait.1, fill = factor(env))) +   geom_histogram(color = \"#e9ecef\", alpha = 0.8, position = \"identity\", bins = 50) +   scale_fill_manual(values = c(\"violetred3\", \"goldenrod3\", \"skyblue2\")) +   labs(x = \"Genetic values for grain yield (t/ha)\", y = \"Count\", fill = \"Environment\")"},{"path":"https://crwerner.github.io/fieldsimr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christian Werner. Author, maintainer. Daniel Tolhurst. Author. Chris Gaynor. Contributor. Giovanny Covarrubias-Pazaran. Contributor. Lorena Batista. Contributor.","code":""},{"path":"https://crwerner.github.io/fieldsimr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Werner C, Tolhurst D (2023). FieldSimR: Simulation Plot Errors Phenotypes Plant Breeding Field Trials. https://github.com/crWerner/fieldsimr, https://crwerner.github.io/fieldsimr/.","code":"@Manual{,   title = {FieldSimR: Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials},   author = {Christian Werner and Daniel Tolhurst},   year = {2023},   note = {https://github.com/crWerner/fieldsimr, https://crwerner.github.io/fieldsimr/}, }"},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"fieldsimr","dir":"","previous_headings":"","what":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"FieldSimR R package simulating realistic plot data multi-environment field trials one traits. core function generates plot errors comprising: spatially correlated error (trend), random error (noise), extraneous error. Spatially correlated errors simulated using either bivariate interpolation separable first order autoregressive process (AR1:AR1). three error terms combined user-defined ratio. Plot phenotypes can generated combining simulated errors genetic values (e.g. true, simulated predicted). FieldSimR provides wrapper functions simulate genetic values multiple traits across multiple environments using R package AlphaSimR.","code":""},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"FieldSimR available CRAN. install use:","code":"install.packages('FieldSimR')"},{"path":"https://crwerner.github.io/fieldsimr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Simulation of Plot Errors and Phenotypes in Plant Breeding Field Trials","text":"Simulation genetic values using compound symmetry GxE interaction model Simulation genetic values using unstructured GxE interaction model Simulation plot errors phenotypes multi-environment plant breeding trial","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"Creates list input parameters 'AlphaSimR' simulate genetic values multiple traits across multiple environments based compound symmetry model genotype--environment (GxE) interaction.  default, 'AlphaSimR' support complex models GxE interaction. However, functionality simulate correlated genetic values can utilised purpose providing required variance structures. compsym_asr_input wrapper function construct variance structures required simulate GxE interaction 'AlphaSimR' based multi-trait compound symmetry model. function assumes separable structure traits environments. simulating genetic values, wrapper function compsym_asr_output can used obtain data frames values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"","code":"compsym_asr_input(   n_envs = 3,   n_traits = 2,   mean = 0,   var = 1,   rel_main_eff_A = 0.5,   cor_A = NULL,   mean_DD = NULL,   var_DD = NULL,   rel_main_eff_DD = NULL,   cor_DD = NULL,   rel_AA = NULL,   rel_main_eff_AA = NULL,   cor_AA = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"n_envs Number environments simulated. minimum two environments required. n_traits Number traits simulated. mean vector mean genetic values environment-within-trait combination. one value specified, environment-within-trait combinations assigned mean. var vector genetic variances trait. Simulated traits restricted compound symmetry model variance environment (.e., main effect variance + GxE interaction variance) covariance pair environments (main effect variance). Note: useVarA = TRUE specified 'AlphaSimR' (default) values var represent additive genetic variances, otherwise represent total (additive + non-additive) genetic variances. rel_main_eff_A vector defining magnitude additive main effect variance relative additive main effect + GxE interaction variance trait. one value specified, traits assigned relative magnitude. Note: 0 < rel_main_eff_A < 1. cor_A matrix additive genetic correlations traits. default, diagonal matrix constructed. mean_DD vector mean dominance degrees environment-within-trait combination (similar mean). one value specified, environment-within-trait combinations assigned mean. default, mean_DD = NULL dominance simulated. var_DD vector dominance degree variances trait. Simulated traits dominance degree variance environment dominance degree covariance pair environments (similar var). rel_main_eff_DD vector defining magnitude dominance degree main effect variance relative main effect + GxE interaction variance trait (similar rel_main_eff_A). one value specified, traits assigned relative magnitude. Note: 0 < rel_main_eff_DD < 1. cor_DD matrix dominance degree correlations traits (similar cor_A). specified dominance simulated, diagonal matrix constructed. rel_AA vector defining magnitude additive--additive (epistatic) variance relative additive genetic variance trait, diploid organism allele frequency 0.5. Simulated traits epistatic variance environment epistatic covariance pair environments (similar var). one value specified, traits assigned relative magnitude. rel_main_eff_AA vector defining magnitude epistatic main effect variance relative main effect + GxE interaction variance trait (similar rel_main_eff_A). one value specified, traits assigned relative magnitude. Note: 0 < rel_main_eff_AA < 1. cor_AA matrix epistatic correlations traits (similar cor_A). specified epistasis simulated, diagonal matrix constructed.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"list containing input parameters 'AlphaSimR', used simulate   correlated genetic effects based compound symmetry model.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"Note: 'AlphaSimR' can simulate different biological effects (see: SimParam). additive traits use addTraitA(). additive + dominance traits use addTraitAD(). additive + epistatic traits use addTraitAE(). additive + dominance + epistatic traits use addTraitADE(). non-additive effects simulated, check useVarA argument functions.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a compound symmetry model for GxE interaction - 'AlphaSimR'\ninput parameters — compsym_asr_input","text":"","code":"# Simulate genetic values in 'AlphaSimR' for two additive + dominance traits across # three environments based on a compound symmetry model for GxE interaction.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # Trait 1 x 3 environments, trait 2 x 3 environments. mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # Trait 1 and 2, same values in the three environments.  # Additive genetic variances and dominance degree variances. var <- c(0.08, 13) # Different values set for traits 1 and 2. var_DD <- c(0.2, 0.2) # The same value set for traits 1 and 2.  # Relative magnitude of the additive and dominance degree main effect variances. rel_main_eff_A <- c(0.4, 0.6) # Different values set for traits 1 and 2. rel_main_eff_DD <- 0.4 # The same value set for traits 1 and 2.  # Additive and dominance degree correlations between the two simulated traits. cor_A <- matrix( # Additive correlation matrix.   c(     1.0, 0.5,     0.5, 1.0   ),   ncol = 2 ) cor_DD <- diag(2) # Dominance correlation matrix - assume independence.  input_asr <- compsym_asr_input(   n_envs = 3,   n_traits = 2,   mean = mean,   var = var,   rel_main_eff_A = rel_main_eff_A,   cor_A = cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   rel_main_eff_DD = rel_main_eff_DD,   cor_DD = cor_DD )"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","title":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","text":"Creates data frame simulated genetic values multiple traits across multiple environments based compound symmetry model genotype--environment (GxE) interaction. function requires 'AlphaSimR' population object generated using function compsym_asr_input.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","text":"","code":"compsym_asr_output(pop, n_envs, n_traits, n_reps, effects = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","text":"pop 'AlphaSimR' population object (Pop-class HybridPop-class) generated using compsym_asr_input. n_envs Number simulated environments (number used compsym_asr_input). n_traits Number simulated traits (number used compsym_asr_input). n_reps vector defining number replicates environment. one value specified, environments assigned number. effects TRUE, list returned additional entries containing total (additive + dominance + epistatic) main effects GxE interaction effects environment-within-trait combination. default, effects = FALSE.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","text":"data frame columns 'env', 'rep', genotype 'id',   simulated genetic values trait. effects = TRUE, list returned   additional entries containing total (additive + dominance + epistatic) main effects   GxE interaction effects environment-within-trait combination.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/compsym_asr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on a compound symmetry model for GxE interaction -\nSimulation using 'AlphaSimR' — compsym_asr_output","text":"","code":"# Simulate genetic values in 'AlphaSimR' for two additive + dominance traits across # three environments based on a compound symmetry model for GxE interaction.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # Trait 1 x 3 environments, trait 2 x 3 environments. mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # Trait 1 and 2, same values in the three environments.  # Additive genetic variances and dominance degree variances. var <- c(0.08, 13) # Different values set for traits 1 and 2. var_DD <- c(0.2, 0.2) # The same value set for traits 1 and 2.  # Relative magnitude of the additive and dominance degree main effect variances. rel_main_eff_A <- c(0.4, 0.6) # Different values set for traits 1 and 2. rel_main_eff_DD <- 0.4 # The same value set for traits 1 and 2.  # Additive and dominance degree correlations between the two simulated traits. cor_A <- matrix( # Additive correlation matrix.   c(     1.0, 0.5,     0.5, 1.0   ),   ncol = 2 ) cor_DD <- diag(2) # Dominance correlation matrix - assume independence.  input_asr <- compsym_asr_input(   n_envs = 3,   n_traits = 2,   mean = mean,   var = var,   rel_main_eff_A = rel_main_eff_A,   cor_A = cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   rel_main_eff_DD = rel_main_eff_DD,   cor_DD = cor_DD )   # 2. Use input_asr to simulate genetic values in 'AlphaSimR' based on a compound symmetry model # for GxE interaction.  library(\"AlphaSimR\") #> Loading required package: R6 FOUNDERPOP <- quickHaplo(   nInd = 100,   nChr = 6,   segSites = 100 )  SP <- SimParam$new(FOUNDERPOP)  SP$addTraitAD(   nQtlPerChr = 100,   mean = input_asr$mean,   var = input_asr$var,   meanDD = input_asr$mean_DD,   varDD = input_asr$var_DD,   corA = input_asr$cor_A,   corDD = input_asr$cor_DD,   useVarA = TRUE )  # By default, the value provided in 'var' represents the additive variance. # If useVarA = FALSE, 'var' represents the total genetic variance.  pop <- newPop(FOUNDERPOP) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found   # 3. Create a data frame containing the simulated genetic values for the two traits across the # three environments.  n_reps <- c(2, 3, 2) # Vector containing the number of complete replicates in each environment.  gv_df <- compsym_asr_output(   pop = pop,   n_envs = 3,   n_traits = 2,   n_reps = n_reps,   effects = TRUE ) #> Error in eval(expr, envir, enclos): object 'pop' not found"},{"path":"https://crwerner.github.io/fieldsimr/reference/df_error_bivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot errors - example data frame — df_error_bivar","title":"Plot errors - example data frame — df_error_bivar","text":"example data frame simulated plot errors two traits across three locations. first third location include two blocks, second location includes three blocks. block comprises 20 rows 5 columns. data frame generated using function field_trial_error bivariate interpolation. simulation plot errors shown vignette Simulation plot errors phenotypes multi-environment plant breeding trial.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/df_error_bivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot errors - example data frame — df_error_bivar","text":"","code":"df_error_bivar"},{"path":"https://crwerner.github.io/fieldsimr/reference/df_error_bivar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot errors - example data frame — df_error_bivar","text":"data frame 700 rows 6 columns: env Environment id block Block id col Column id row Row id e.Trait.1 Simulated plot error trait 1 e.Trait.2 Simulated plot error trait 2","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/df_gv_unstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic values - example data frame — df_gv_unstr","title":"Genetic values - example data frame — df_gv_unstr","text":"example data frame simulated genetic values 100 genotypes two traits across three environments. data frame generated using wrapper functions unstr_asr_input unstr_asr_output simulate correlated genetic values based unstructured model genotype--environment (GxE) interaction `AlphaSimR'. simulation genetic values shown vignette Simulation genetic values using unstructured GxE interaction model.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/df_gv_unstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic values - example data frame — df_gv_unstr","text":"","code":"df_gv_unstr"},{"path":"https://crwerner.github.io/fieldsimr/reference/df_gv_unstr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genetic values - example data frame — df_gv_unstr","text":"data frame 700 rows 5 columns: env Environment id rep Replicate id id Genotype id gv.Trait.1 Simulated genetic values trait 1 gv.Trait.2 Simulated genetic values trait 2","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate plot errors in multi-environment field trials — field_trial_error","title":"Simulate plot errors in multi-environment field trials — field_trial_error","text":"Creates data frame simulated plot errors multi-environment field trials one traits. plot errors comprise spatially correlated error (trend), random error (noise) extraneous error. spatially correlated error simulated according either 1) bivariate interpolation using interp function package `interp', 2) separable first-order autoregressive process (AR1:AR1). random error simulated using independent process. extraneous error simulated sum column /row terms, user can choose independent correlated process. spatially correlated, random, extraneous errors combined according user-defined ratio.  multiple traits, correlated errors can simulated assuming 1) correlated spatial error traits, 2) correlated random error traits, 3) correlated extraneous error traits, 4) combination 1-3.  separable correlation structure assumed traits environments, different variances can assigned different environment-within-trait combinations.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate plot errors in multi-environment field trials — field_trial_error","text":"","code":"field_trial_error(   n_envs = 1,   n_traits = 1,   n_blocks = 2,   n_cols = 10,   n_rows = 20,   block_dir = \"col\",   var_R = 1,   S_cor_R = NULL,   R_cor_R = NULL,   E_cor_R = NULL,   spatial_model = \"Bivariate\",   complexity = NULL,   plot_length = 5,   plot_width = 2,   col_cor = 0.5,   row_cor = 0.7,   prop_spatial = 0.4,   prop_ext = 0,   ext_dir = \"row\",   ext_col_cor = 0,   ext_row_cor = 0,   return_effects = FALSE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate plot errors in multi-environment field trials — field_trial_error","text":"n_envs Number environments simulated (number used compsym_asr_input unstr_asr_output, applicable). n_traits Number traits simulated. n_blocks vector specifying number blocks environment. one value provided, environments assigned number. n_cols vector specifying total number columns environment. one value provided, environments assigned number. n_rows vector specifying total number rows environment. one value provided, environments assigned number. block_dir vector specifying block direction environment. Use 'col' side--side arrangement (default), 'row' --arrangement, NA one block simulated. one value provided, environments assigned block direction (applicable). var_R vector error variances environment-within-trait combination. one value provided, environment-within-trait combinations assigned error variance. S_cor_R matrix spatial error correlations traits. specified spatial error simulated, diagonal matrix constructed. R_cor_R matrix random error correlations traits. specified random error simulated, diagonal matrix constructed. E_cor_R matrix extraneous error correlations traits. specified extraneous error simulated, diagonal matrix constructed. Note: correlation traits used column row errors (applicable). spatial_model character string specifying model used simulate two-dimensional spatial error term. One either 'Bivariate' (bivariate interpolation, default) 'AR1:AR1' (separable first-order autoregressive process). complexity vector specifying complexity bivariate interpolation environment. one value provided, environments assigned complexity. specified spatial_model = \"Bivariate\", complexity set half maximum number columns rows environment. generally provides good results. See `interp' details. plot_length vector plot lengths (column direction, usually longer side) environment. one value provided, environments assigned plot length. required spatial_model = \"Bivariate\". plot_width vector plot widths (row direction, usually shorter side) environment. one value provided, environments assigned plot width. required spatial_model = \"Bivariate\". col_cor vector column autocorrelations environment used AR1:AR1 spatial error model. one value provided, environments assigned column autocorrelation. required spatial_model = \"AR1:AR1\". row_cor vector row autocorrelations environment used AR1:AR1 spatial error model. one value provided, environments assigned row autocorrelation. required spatial_model = \"AR1:AR1\". prop_spatial vector specifying proportion spatial error variance total error variance (spatial + random + extraneous) environment-within-trait combination. one value provided, environment-within-trait combinations assigned proportion spatial error variance. prop_ext vector specifying proportion extraneous error variance total error variance (spatial + random + extraneous) environment-within-trait combination. one value provided, environment-within-trait combinations assigned proportion extraneous error variance. ext_dir vector specifying direction extraneous variation environment. Use 'col' simulate variation column direction, 'row' (default) variation row direction, '' variation directions, NA zero extraneous variation simulated. ext_dir = \"\", half variance assigned columns half assigned rows. one value provided, environments assigned direction (applicable). ext_col_cor vector column autocorrelations environment used extraneous error model. one value provided, environments assigned column autocorrelation. ext_row_cor vector row autocorrelations environment used extraneous error model. one value provided, environments assigned row autocorrelation. return_effects TRUE, list returned additional entries trait containing spatial, random extraneous errors. default, return_effects = FALSE.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate plot errors in multi-environment field trials — field_trial_error","text":"data frame columns 'env', 'block', 'col' 'row', well   simulated error trait. return_effects = TRUE, list returned   additional columns trait providing spatial, random extraneous errors.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/field_trial_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate plot errors in multi-environment field trials — field_trial_error","text":"","code":"# Simulate plot errors for two traits across three environments using a bivariate # interpolation model for spatial variation.  n_envs <- 3 n_traits <- 2  # Field layout n_cols <- 10 n_rows <- c(30, 30, 20) block_dir <- \"col\" plot_length <- 5 plot_width <- 2 n_blocks <- c(3, 3, 2)  # Error variances for all six environment-within-trait combinations. var_R <- c(0.2, 0.4, 0.6, 10, 15, 20) # Trait 1 x 3 environments, trait 2 x 3 environments.  # Spatial error correlations between the two simulated traits. S_cor_R <- matrix(   c(     1.0, 0.2,     0.2, 1.0   ),   ncol = 2 )  # Structure of simulated error. prop_spatial <- 0.4 prop_ext <- 0.2 ext_dir <- \"row\" ext_row_cor <- -0.6  error_df <- field_trial_error(   n_envs = n_envs,   n_traits = n_traits,   n_blocks = n_blocks,   n_cols = n_cols,   n_rows = n_rows,   block_dir = \"row\",   var_R = var_R,   S_cor_R = S_cor_R,   spatial_model = \"Bivariate\",   plot_length = plot_length,   plot_width = plot_width,   prop_spatial = prop_spatial,   prop_ext = prop_ext,   ext_dir = ext_dir,   ext_row_cor = ext_row_cor,   return_effects = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","title":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","text":"Creates data frame simulated phenotypes one traits combining simulated plot errors genetic values (e.g. true, simulated predicted). genetic values can generated externally, note must stored data frame described .","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","text":"","code":"make_phenotypes(gv_df, error_df, randomise = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","text":"gv_df data frame genetic values. Must contain columns 'env', 'rep', 'id', followed genetic values trait. error_df data frame plot errors. Must contain columns 'env', 'block', 'col', 'row', followed plot errors trait. randomise TRUE, genotypes randomly allocated plots within blocks generate randomized complete block design (RCBD).Note: experimental designs must generated externally.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","text":"data frame columns 'env', 'block', 'column', 'row' 'genotype', followed   phenotypes trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/make_phenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate phenotypes - Combine simulated genetic values and plot errors — make_phenotypes","text":"","code":"# Simulate phenotypes by combining the genetic values and plot errors provided in # the two example data frames 'df_gv_unstr' and 'df_error_bivar'.  gv_df <- df_gv_unstr error_df <- df_error_bivar  pheno_df <- make_phenotypes(   gv_df,   error_df,   randomise = TRUE )"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphics for plot effects — plot_effects","title":"Graphics for plot effects — plot_effects","text":"Graphically displays plot effects (e.g., phenotypes, genetic values, plot errors) onto field array, colour gradient ranges red (low value) green (high value). function requires data frame generated field_trial_error input, data frame columns 'col', 'row', effect displayed. data frame contains 'block' column, field array split blocks blocks = TRUE.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphics for plot effects — plot_effects","text":"","code":"plot_effects(df, effect, blocks = TRUE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphics for plot effects — plot_effects","text":"df data frame columns 'col', 'row', effect plotted. df also contains 'block' column, field array split blocks blocks = TRUE. effect effect plotted. blocks TRUE (default), field array split blocks.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphics for plot effects — plot_effects","text":"graphical field array, colour gradient ranges red (low value) green (high value).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/plot_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphics for plot effects — plot_effects","text":"","code":"# Plot the simulated plot errors for trait 2 in environment 2 provided in the example data # frame 'df_error_bivar'.  error_df <- df_error_bivar[df_error_bivar$env == 2, ]  plot_effects(   df = error_df,   effect = \"e.Trait.2\" )"},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q plot — qq_plot","title":"Q-Q plot — qq_plot","text":"Creates quantile-quantile (Q-Q) plot compares theoretical quantiles normal distribution sample quantiles distribution user effects.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q plot — qq_plot","text":"","code":"qq_plot(df, effect, labels = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q plot — qq_plot","text":"df data frame containing effect plotted. effect name effect plotted. labels FALSE (default), data points without labels plotted. TRUE, column row labels shown Q-Q plot. requires additional columns 'col' 'row' data frame.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q plot — qq_plot","text":"Q-Q plot x- y-axes displaying theoretical sample quantiles   effect plotted, respectively.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/qq_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q plot — qq_plot","text":"","code":"# Q-Q plot of the simulated plot errors for trait 2 in environment 2 provided in the example # data frame 'df_error_bivar'.  error_df <- df_error_bivar[df_error_bivar$env == 2, ]  qq <- qq_plot(   df = error_df,   effect = \"e.Trait.2\",   labels = TRUE )  # Q-Q plot qq   # Extraction of a data frame containing the theoretical and sample quantiles of # the effect to be plotted. qq_df <- qq$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Random correlation matrix — rand_cor_mat","title":"Random correlation matrix — rand_cor_mat","text":"Creates symmetric p x p correlation matrix user-defined minimum maximum correlation values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random correlation matrix — rand_cor_mat","text":"","code":"rand_cor_mat(p, min_cor = -1, max_cor = 1, pos_def = FALSE)"},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random correlation matrix — rand_cor_mat","text":"p scalar defining dimensions correlation matrix. min_cor scalar defining minimum potential value. max_cor scalar defining maximum potential value. pos_def TRUE, function 'bend' package `mbend' used default arguments bend non-positive-definite correlation matrix positive-definite matrix (appropriate). default, pos_def = FALSE.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random correlation matrix — rand_cor_mat","text":"symmetric p x p correlation matrix.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/rand_cor_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random correlation matrix — rand_cor_mat","text":"","code":"cor_A <- rand_cor_mat(10, min_cor = -0.2, max_cor = 0.8, pos_def = TRUE) #> Unweighted bending #> max.iter = 10000 #> small.positive = 1e-04 #> method = hj #> Found a correlation matrix. #> Convergence met after 7 iterations."},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample variogram — sample_variogram","title":"Sample variogram — sample_variogram","text":"Creates sample variogram. x- y-axes display row column displacements, respectively. z-axis displays semi-variance (variogram ordinates).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample variogram — sample_variogram","text":"","code":"sample_variogram(df, effect, min_np = 30)"},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample variogram — sample_variogram","text":"df data frame containing columns 'col', 'row', effect plotted. effect name effect plotted. min_np semi variances based least min_np pairs plots displayed. default, min_np = 30.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample variogram — sample_variogram","text":"Graphic sample variogram, x- y-axes display row   column displacements z-axis displays semi-variance (variogram ordinates).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/sample_variogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample variogram — sample_variogram","text":"","code":"# Sample variogram of the simulated plot errors for trait 2 in environment 2 provided in the # example data frame 'df_error_bivar'.  error_df <- df_error_bivar[df_error_bivar$env == 2, ]  vario <- sample_variogram(   df = error_df,   effect = \"e.Trait.2\", )  # Sample variogram vario   # Extraction of a data frame containing the column and row displacements as well as the # semi-variances (sample variogram ordinates).  sample_df <- vario$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical variogram — theoretical_variogram","title":"Theoretical variogram — theoretical_variogram","text":"Creates theoretical variogram. x- y-axes display row column displacements, respectively. z-axis displays semi-variance (variogram ordinates).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical variogram — theoretical_variogram","text":"","code":"theoretical_variogram(   n_cols,   n_rows,   var_R = 1,   prop_spatial = 0.5,   col_cor,   row_cor )"},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical variogram — theoretical_variogram","text":"n_cols scalar defining number columns. n_rows scalar defining number rows. var_R scalar defining total error variance. prop_spatial scalar defining proportion spatial error variance total error variance (spatial + random). col_cor scalar defining column autocorrelation value. row_cor scalar defining row autocorrelation value.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical variogram — theoretical_variogram","text":"Graphic theoretical variogram, x- y- axes display row   column displacements z-axis displays semi-variance (variogram ordinates).","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/theoretical_variogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical variogram — theoretical_variogram","text":"","code":"# Theoretical variogram for a field with 10 columns and 20 rows, using column and row # autocorrelations of 0.4 and 0.8.  vario <- theoretical_variogram(   n_cols = 10,   n_rows = 20,   var_R = 1,   prop_spatial = 0.5,   col_cor = 0.4,   row_cor = 0.8 )  # Theoretical variogram vario   # Extraction of a data frame containing the column and row displacements as well as the # semi-variances (theoretical variogram ordinates).  theoretical_df <- vario$data"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"Creates list input parameters 'AlphaSimR' simulate genetic values multiple traits across multiple environments based unstructured model genotype--environment (GxE) interaction.  default, 'AlphaSimR' support complex models GxE interaction. However, functionality simulate correlated genetic values can utilised purpose providing required variance structures. unstr_asr_input wrapper function construct variance structures required simulate GxE interaction 'AlphaSimR' based multi-trait unstructured model. function can handle separable non-separable structures traits environments (see ). simulating genetic values, wrapper function unstr_asr_output can used obtain data frame relevant values.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"","code":"unstr_asr_input(   n_envs = 3,   n_traits = 2,   mean = 0,   var = 1,   T_var = NULL,   E_var = NULL,   cor_A = NULL,   T_cor_A = NULL,   E_cor_A = NULL,   mean_DD = NULL,   var_DD = NULL,   T_var_DD = NULL,   E_var_DD = NULL,   cor_DD = NULL,   T_cor_DD = NULL,   E_cor_DD = NULL,   rel_AA = NULL,   T_rel_AA = NULL,   E_rel_AA = NULL,   cor_AA = NULL,   T_cor_AA = NULL,   E_cor_AA = NULL )"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"n_envs Number environments simulated. minimum two environments required. n_traits Number traits simulated. mean vector mean genetic values environment-within-trait combination. one value specified, environment-within-trait combinations assigned mean. var vector genetic variances environment-within-trait combination. one value specified, environment-within-trait combinations assigned mean. Alternatively, separable structure traits environments desired, T_var E_var can specified. T_var vector genetic variances trait. Must provided combination E_var. Alternatively, var can specified. E_var vector genetic variances environment. Must provided combination T_var. Alternatively, var can specified. cor_A matrix additive genetic correlations environment-within-trait combinations. default, diagonal matrix constructed. Alternatively, T_cor_A E_cor_A can specified. T_cor_A matrix additive genetic correlations traits. Must provided combination E_cor_A. Alternatively, cor_A can specified. E_cor_A matrix additive genetic correlations environments. Must provided combination T_cor_A. Alternatively, cor_A can specified. mean_DD vector mean dominance degrees environment-within-trait combination (similar mean). one value specified, environment-within-trait combinations assigned mean. default, mean_DD = NULL dominance simulated. var_DD vector dominance degree variances environment-within-trait combination (similar var). one value specified, environment-within-trait combinations assigned variance. Alternatively, separable structure traits environments desired, T_var_DD E_var_DD can specified. T_var_DD vector dominance degree variances trait (similar T_var). Must provided combination E_var_DD. Alternatively, var_DD can specified. E_var_DD vector dominance degree genetic variances environment (similar E_var). Must provided combination T_var_DD. Alternatively, var_DD can specified. cor_DD matrix dominance degree correlations environment-within-trait combinations (similar cor_A). specified dominance simulated, diagonal matrix constructed. Alternatively, T_cor_DD E_cor_DD can specified. T_cor_DD matrix dominance degree correlations traits (similar T_cor_A). Must provided combination E_cor_DD. Alternatively, cor_DD can specified. E_cor_DD matrix dominance degree correlations environments (similar E_cor_A). Must provided combination T_cor_DD. Alternatively, cor_DD can specified. rel_AA vector defining magnitude additive--additive (epistatic) variance relative additive genetic variance environment-within-trait combination, diploid organism allele frequency 0.5. one value specified, environment-within-trait combinations assigned value. default, rel_AA = NULL epistasis simulated. Alternatively, separable structure traits environments desired, T_rel_AA E_rel_AA can specified. T_rel_AA vector defining magnitude additive--additive (epistatic) variance relative additive genetic variance trait. Must provided combination E_rel_AA. Alternatively, rel_AA can specified. E_rel_AA vector defining magnitude additive--additive (epistatic) variance relative additive genetic variance environment. Must provided combination T_rel_AA. Alternatively, rel_AA can specified. cor_AA matrix epistatic correlations environment-within-trait combinations (similar cor_A). specified epistasis simulated, diagonal matrix constructed. Alternatively, T_cor_AA E_cor_AA can specified. T_cor_AA matrix epistatic correlations traits (similar T_cor_A). Must provided combination E_cor_AA. Alternatively, cor_AA can specified. E_cor_AA matrix epistatic correlations environments (similar E_cor_A). Must provided combination T_cor_AA. Alternatively, cor_AA can specified.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"list containing input parameters 'AlphaSimR', used simulate   correlated genetic effects based unstructured model.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"unstr_asr_input can handle separable non-separable structures traits environments. separable structures, provide (1) T_var & E_var, (2)   T_cor_A & E_cor_A. non-separable structures, provide (1) var, (2) cor_A. Note: 'AlphaSimR' can simulate different biological effects (see: SimParam). additive traits use addTraitA(). additive + dominance traits use addTraitAD(). additive + epistatic traits use addTraitAE(). additive + dominance + epistatic traits use addTraitADE(). non-additive effects simulated, check useVarA argument functions.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on an unstructured model for GxE interaction - 'AlphaSimR' input\nparameters — unstr_asr_input","text":"","code":"# Simulate genetic values in 'AlphaSimR' for two additive + dominance traits across # three environments based on an unstructured model for GxE interaction.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # Trait 1 x 3 environments, trait 2 x 3 environments. mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # Trait 1 and 2, same values in the three environments.  # Additive genetic variances and dominance degree variances. var <- c(0.085, 0.12, 0.06, 15.1, 8.5, 11.7) # Trait 1 x 3 environments, trait 2 x 3 environments. var_DD <- rep(0.2, 6) # The same value set for traits 1 and 2.  # Additive genetic correlations between the two simulated traits. T_cor_A <- matrix(   c(     1.0, 0.6,     0.6, 1.0   ),   ncol = 2 )  # Additive genetic correlations between the three simulated environments. E_cor_A <- matrix(   c( # Matrix of additive genetic correlations between the three environments.     1.0, 0.4, 0.6,     0.4, 1.0, 0.5,     0.6, 0.5, 1.0   ),   ncol = 3 )  # Dominance degree correlations between all six environment-within-trait combinations. cor_DD <- diag(6) # Assuming independence between traits  input_asr <- unstr_asr_input(   n_envs = 3,   n_traits = 2,   mean = mean,   var = var,   T_cor_A = T_cor_A,   E_cor_A = E_cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   cor_DD = cor_DD )"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","title":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","text":"Creates data frame simulated genetic values multiple traits across multiple environments based unstructured model genotype--environment (GxE) interaction. function requires 'AlphaSimR' population object generated using unstr_asr_input function.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","text":"","code":"unstr_asr_output(pop, n_envs, n_traits, n_reps)"},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","text":"pop 'AlphaSimR' population object (Pop-class HybridPop-class) generated using unstr_asr_input. n_envs Number simulated environments (number used unstr_asr_input). n_traits Number simulated traits (number used unstr_asr_input). n_reps vector defining number replicates environment. one value specified, environments assigned number.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","text":"data frame columns 'env', 'rep', genotype 'id',   simulated genetic values trait.","code":""},{"path":"https://crwerner.github.io/fieldsimr/reference/unstr_asr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate genetic values based on an unstructured model for GxE interaction -\nSimulation using 'AlphaSimR' — unstr_asr_output","text":"","code":"# Simulate genetic values in 'AlphaSimR' for two additive + dominance traits across # three environments based on an unstructured model for GxE interaction.  # 1. Define the genetic architecture of the simulated traits. # Mean genetic values and mean dominance degrees. mean <- c(4.9, 5.4, 5.1, 235.2, 228.5, 239.1) # Trait 1 x 3 environments, trait 2 x 3 environments. mean_DD <- c(0.4, 0.4, 0.4, 0.1, 0.1, 0.1) # Trait 1 and 2, same values in the three environments.  # Additive genetic variances and dominance degree variances. var <- c(0.085, 0.12, 0.06, 15.1, 8.5, 11.7) # Trait 1 x 3 environments, trait 2 x 3 environments. var_DD <- rep(0.2, 6) # The same value set for traits 1 and 2.  # Additive genetic correlations between the two simulated traits. T_cor_A <- matrix(   c(     1.0, 0.6,     0.6, 1.0   ),   ncol = 2 )  # Additive genetic correlations between the three simulated environments. E_cor_A <- matrix(   c( # Matrix of additive genetic correlations between the three environments.     1.0, 0.4, 0.6,     0.4, 1.0, 0.5,     0.6, 0.5, 1.0   ),   ncol = 3 )  # Dominance degree correlations between all six environment-within-trait combinations. cor_DD <- diag(6) # Assuming independence between traits  input_asr <- unstr_asr_input(   n_envs = 3,   n_traits = 2,   mean = mean,   var = var,   T_cor_A = T_cor_A,   E_cor_A = E_cor_A,   mean_DD = mean_DD,   var_DD = var_DD,   cor_DD = cor_DD )   # 2. Use input_asr to simulate genetic values in 'AlphaSimR' based on an unstructured model for # GxE interaction.  library(\"AlphaSimR\") FOUNDERPOP <- quickHaplo(   nInd = 100,   nChr = 6,   segSites = 100 )  SP <- SimParam$new(FOUNDERPOP)  SP$addTraitAD(   nQtlPerChr = 100,   mean = input_asr$mean,   var = input_asr$var,   meanDD = input_asr$mean_DD,   varDD = input_asr$var_DD,   corA = input_asr$cor_A,   corDD = input_asr$cor_DD,   useVarA = TRUE )  # By default, the value provided in 'var' represents the additive variance. # If useVarA=FALSE, 'var' represents the total genetic variance.  pop <- newPop(FOUNDERPOP) #> Error in get(\"SP\", envir = .GlobalEnv): object 'SP' not found   # 3. Create a data frame containing the simulated genetic values for the two traits across the # three environments.  n_reps <- c(2, 3, 2) # Vector containing the number of complete replicates in each environment.  gv_df <- unstr_asr_output(   pop = pop,   n_envs = 3,   n_traits = 2,   n_reps = n_reps ) #> Error in eval(expr, envir, enclos): object 'pop' not found"},{"path":"https://crwerner.github.io/fieldsimr/news/index.html","id":"fieldsimr-110","dir":"Changelog","previous_headings":"","what":"FieldSimR 1.1.0","title":"FieldSimR 1.1.0","text":"CRAN release: 2023-04-12 Added NEWS.md file track changes package. Added argument pos_def function rand_cor_mat make bending non-positive-definite correlation matrix positive-definite matrix optional. Added example data frame df_error_bivar plot errors two traits across three locations generated using field_trial_error. Added example data frame df_gv_unstr simulated genetic values two traits across three environments generated using unstr_asr_input unstr_asr_output. Added functionality simulate extraneous variation field_trial_error. Added internal functions spline_interp fill_matrix interpolate extrapolate missing values NAs remain bivariate interpolation. Added make_phenotypes create phenotypes combination genetic values plot errors. Added qq_plot compare theoretical quantiles normal distribution sample quantiles distribution user-defined effect. Added sample_variogram create variogram user-defined effect. Added theoretical_variogram create theoretical variogram. Added vignette compound_symmetry_GxE_demo demonstrate simulation genetic values using compound symmetry GxE model. Added vignette spatial_error_demo demonstrate simulation plot errors phenotypes multi-environment plant breeding trial. Added vignette unstructured_GxE_demo demonstrate simulation genetic values using unstructured GxE model. Removed argument env function plot_effects. Replaced package fields graphics plot_effects ggplot2. Set complexity argument field_trial_error default maximum number columns rows environment. Updated Description DESCRIPTION.","code":""}]
