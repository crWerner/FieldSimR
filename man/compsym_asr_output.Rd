% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compoundSymmetry.R
\name{compsym_asr_output}
\alias{compsym_asr_output}
\title{Compound symmetry model for genotype-by-environment interaction using AlphaSimR -
simulated genetic values}
\usage{
compsym_asr_output(pop, nEnvs, nReps, nTraits, effects = FALSE)
}
\arguments{
\item{pop}{An AlphaSimR population object
(\code{\link[AlphaSimR]{Pop-class}} or \code{\link[AlphaSimR]{HybridPop-class}})
generated using \link[FieldSimR]{compsym_asr_input}.}

\item{nEnvs}{Number of simulated environments (same as used in
\link[FieldSimR]{compsym_asr_input}).}

\item{nReps}{A vector with the number of complete replicates in each
environment. If only one value is provided, then all environments will be
assigned the same value.}

\item{nTraits}{Number of simulated traits (same as used in
\link[FieldSimR]{compsym_asr_input}).}

\item{effects}{When TRUE, a list is returned  with additional columns
containing the total (additive + dominance + epistatic) main effects and GxE
interaction effects for each trait.}
}
\value{
A data-frame containing environment number, replicate number,
genotype ID and simulated genetic values for each trait. When
\code{effects = TRUE}, a list is returned with additional columns containing
the total (additive + dominance + epistatic) main effects and GxE
interaction effects for each trait.
}
\description{
Creates a data frame of correlated genetic values across multiple traits
and multiple environments based on a compound symmetry model for
genotype-by-environment (GxE) interaction. This function requires an AlphaSimR
population object that was generated using input parameters from
\link[FieldSimR]{compsym_asr_input}.
}
\examples{
# Simulation of genetic values in AlphaSimR for two additive + dominance traits
# and three environments based on a compound symmetry model for GxE interaction.

# 1. Assign genetic architecture of traits
# Mean genetic values and mean dominance degrees for trait 1 in 3 environments
# and trait 2 in 3 environments.
mean <- c(1, 3, 2, 80, 70, 100) # trait 1 by 3 envs, trait 2 by 3 envs.
meanDD <- c(0.1, 0.4) # trait 1 and trait 2, same values assigned to all 3 envs for each trait

# Additive genetic variances (set useVarA=TRUE) and dominance degree variances for traits 1 and 2.
var <- c(0.2, 10)
varDD <- c(0.1, 0.2)

# Relative magnitude of additive and dominance degree main effect variance for traits 1 and 2.
relMainEffA <- c(0.4, 0.6) # different values for traits 1 and 2
relMainEffDD <- 0.8  # same values used for traits 1 and 2

# Additive and dominance degree correlations between traits 1 and 2.
corA <- matrix(c(1.0,  0.3, 0.3,  1.0), ncol = 2)
corDD <- diag(2) # assuming independence between traits

input_asr <- compsym_asr_input(nEnvs = 3, nTraits = 2,
                              mean = mean, var = var,
                              relMainEffA = relMainEffA, corA = corA,
                              meanDD = meanDD, varDD = varDD,
                              relMainEffDD = relMainEffDD, corDD = corDD)


# 2. Use input_asr to simulate genetic values in AlphaSimR based on a compound symmetry model for
#    GxE interaction.

library("AlphaSimR")
FOUNDERPOP <- quickHaplo(nInd = 100,
                         nChr = 6,
                         segSites = 100)

SP <- SimParam$new(FOUNDERPOP)

SP$addTraitAD(nQtlPerChr = 100,
              mean = input_asr$mean,
              var = input_asr$var,
              meanDD = input_asr$meanDD,
              varDD = input_asr$varDD,
              corA = input_asr$corA,
              corDD = input_asr$corDD,
              useVarA = TRUE)             # Variance in var is used as additive variance.
                                          # If FALSE, var = total genetic variance.

pop <- newPop(FOUNDERPOP)


# 3. Create a data frame containing the simulated genetic values for each of the two traits
#    and three environments.

nReps <- c(2, 3, 2)  # Vector with the number of complete replicates in each environment

trial_df <- compsym_asr_output(pop = pop, nEnvs = 3, nReps = nReps,
                               nTraits = 2, effects = TRUE)

}
