#   }
#
#   if (spatial_model == "AR1:AR1") {
#     png(paste0("plot_tests_loop/AR1/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
#
#
#   if (spatial_model == "Bivariate") {
#     png(paste0("plot_tests_loop/BV/plot_c", cycle, ".png"))
#     plot(figure)
#     dev.off()
#   }
######################################################
####### REMOVE SIMULATION PARAMETERS #################
######################################################
to_remove <- grep("^cycle", ls(),
invert = TRUE,
value = TRUE)
rm(list = c(to_remove, "to_remove"))
}
save.image()
library(devtools)
library(available)
library(styler)
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
styler::style_pkg() # see changes with git diff <file path>
styler::style_pkg() # see changes with git diff <file path>
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
document()
check()
?heatmap
heatmap
document()
check()
?is.positive.definite
check()
check()
document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
# Create checklist
usethis::use_release_issue()
# Create checklist
usethis::use_release_issue()
## Most recent recommended testing pipeline
devtools::spell_check()
urlchecker::url_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran(email = "c.werner@cgiar.org", platforms = "debian-gcc-devel")
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
devtools::check_rhub() # Used for cran-comments.md
library(revdepcheck)
install.packages("revdepcheck")
urlchecker::url_check()
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
# Create checklist
usethis::use_release_issue()
?gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
# Create checklist
usethis::use_release_issue()
# Create checklist
usethis::use_release_issue()
?fieldsimr
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
require(FieldSimR)
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
library(FieldSimR)
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
error_df
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
variogram <- sample_variogram(
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
sample_variogram
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
variogram
variogram$data
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1",
prop.spatial = 1)
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
# Sample variogram
variogram
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
# Sample variogram
variogram
var(error_df$e.Trait1)
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1", return.effects = T)
var(error_df$error.df$e.Trait1)
var(error_df$Trait1$e.spat)
var(error_df$Trait1$e.rand)
??citation
?citation
?compsym_asr_input
?compsym_asr_output
?unstr_asr_input
?multi_asr_input
?compsym_asr_input
?multi_asr_input
?compsym_asr_input
?unstr_asr_input
?bend
rand_cor_mat(min.cor = 1, max.cor = 1)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
rand_cor_mat(min.cor = 1, max.cor = 1)
rand_cor_mat(min.cor = 1, max.cor = 0.9)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
rand_cor_mat(min.cor = 1, max.cor = 0.9)
rand_cor_mat(min.cor = -1, max.cor = -1)
rand_cor_mat(min.cor = -1, max.cor = 1)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
?bend
?rand_cor_mat
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
corA <- rand_cor_mat(
n = 10,
min.cor = -0.2,
max.cor = 0.8,
pos.def = TRUE,
small.positive = 1e-8
)
corA
eigen(corA)
bend
bend()
mbend::bend()
mbend::bend
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
corA <- rand_cor_mat(
n = 10,
min.cor = -0.2,
max.cor = 0.8,
pos.def = TRUE,
small.positive = 0
)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
corA <- rand_cor_mat(
n = 10,
min.cor = -0.2,
max.cor = 0.8,
pos.def = TRUE,
small.positive = 1e-8
)
eigen(corA)$v
eigen(corA)$values
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/random_correlation_matrix.R")
corA <- rand_cor_mat(
n = 10,
min.cor = -0.2,
max.cor = 0.8,
pos.def = TRUE,
small.positive = 1e-4
)
eigen(corA)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv.df = gv_df_unstr,
error.df = error_df_bivar,
randomise = TRUE
)
pheno_df
as.matrix(gv_df_unstr)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv.df = as.matrix(gv_df_unstr),
error.df = error_df_bivar,
randomise = TRUE
)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments
meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments
# Additive genetic variances and dominance degree variances.
var <- c(0.08, 13) # Different values for Traits 1 and 2
varDD <- 0.2 # Same value for Traits 1 and 2
# Proportion of additive and dominance degree main effect variances.
prop.main <- c(0.4, 0.6) # Different values for Traits 1 and 2
prop.mainDD <- 0.4 # Same value for Traits 1 and 2
# Additive and dominance degree correlations between the two simulated traits.
corA <- matrix(c(
1.0, 0.5,
0.5, 1.0
), ncol = 2)
corDD <- diag(2) # Assuming independence
corA
corA <- matrix(c(
1.0, 1,
1, 1.0
), ncol = 2)
corDD <- diag(2) # Assuming independence
solve(corA)
input_asr <- compsym_asr_input(
ntraits = 2,
nenvs = 2,
mean = mean,
var = var,
prop.main = prop.main,
corA = corA,
meanDD = meanDD,
varDD = varDD,
prop.mainDD = prop.mainDD,
corDD = corDD
)
input_asr
library("AlphaSimR")
FOUNDERPOP <- quickHaplo(
nInd = 10,
nChr = 1,
segSites = 20
)
SP <- SimParam$new(FOUNDERPOP)
SP$addTraitAD(
nQtlPerChr = 20,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA,
meanDD = input_asr$meanDD,
varDD = input_asr$varDD,
corDD = input_asr$corDD,
useVarA = TRUE
)
input_asr$corA
input_asr$corA
input_asr$corA <- matrix(1, ncol =6, nrow = 6)
SP$addTraitAD(
nQtlPerChr = 20,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA,
meanDD = input_asr$meanDD,
varDD = input_asr$varDD,
corDD = input_asr$corDD,
useVarA = TRUE
)
input_asr$corA[1,] <- input_asr$corA[,1]
input_asr$corA[1,] <- input_asr$corA[,1] <- 0
input_asr$corA
input_asr$corA[1,1]<- 1
SP$addTraitAD(
nQtlPerChr = 20,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA,
meanDD = input_asr$meanDD,
varDD = input_asr$varDD,
corDD = input_asr$corDD,
useVarA = TRUE
)
input_asr$corA
eigen(input_asr$corA)
diag(input_asr$corA) <- diag(input_asr$corA) + 1e-18
input_asr$corA
eigen(input_asr$corA)
diag(input_asr$corA) <- diag(input_asr$corA) + 1e-12
input_asr$corA
eigen(input_asr$corA)
SP$addTraitAD(
nQtlPerChr = 20,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA,
meanDD = input_asr$meanDD,
varDD = input_asr$varDD,
corDD = input_asr$corDD,
useVarA = TRUE
)
eigen(matrix(1,ncol=6,nrow=6))
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
plot_effects(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
?compsym_asr_output
corA <- rand_cor_mat(
n = 10,
min.cor = -1,
max.cor = 1
)
plot_matrix(
mat = corA,
order = TRUE,
labels = TRUE
)
plot_matrix(
mat = corA,
order = TRUE,
labels = TRUE
)
plot_matrix(
mat = corA,
order = TRUE,
labels = TRUE
)$data
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
save.image()
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
error_df <- field_trial_error(ntraits = 1,
nenvs = 1,
spatial.model = "AR1")
variogram <- sample_variogram(
df = error_df,
effect = "e.Trait1"
)
# Sample variogram
variogram
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
variogram <- theoretical_variogram(
ncols = 10,
nrows = 20,
varR = 1,
col.cor = 0.5,
row.cor = 0.7,
prop.spatial = 0.5
)
# Theoretical variogram
variogram
mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments
meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments
# Additive genetic variances and dominance degree variances.
var <- c(0.08, 13) # Different values for Traits 1 and 2
varDD <- 0.2 # Same value for Traits 1 and 2
# Proportion of additive and dominance degree main effect variances.
prop.main <- c(0.4, 0.6) # Different values for Traits 1 and 2
prop.mainDD <- 0.4 # Same value for Traits 1 and 2
# Additive and dominance degree correlations between the two simulated traits.
corA <- matrix(c(
1.0, 0.5,
0.5, 1.0
), ncol = 2)
corDD <- diag(2) # Assuming independence
input_asr <- compsym_asr_input(
ntraits = 2,
nenvs = 2,
mean = mean,
var = var,
prop.main = prop.main,
corA = corA,
meanDD = meanDD,
varDD = varDD,
prop.mainDD = prop.mainDD,
corDD = corDD
)
input_asr
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
input_asr <- compsym_asr_input(
ntraits = 2,
nenvs = 2,
mean = mean,
var = var,
prop.main = prop.main,
corA = corA,
meanDD = meanDD,
varDD = varDD,
prop.mainDD = prop.mainDD,
corDD = corDD
)
input_asr
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
plot_effects(df = error_df_bivar[error_df_bivar$env == 1,], effect = "e.Trait1")
plot_effects(df = gv_df_unstr[gv_df_unstr$env == 1,], effect = "e.Trait1")
plot_effects(df = gv_df_unstr[gv_df_unstr$env == 1,], effect = "gv.Trait1")
?desiredGains
desiredGains
save.image()
tt <- rnorm(100)
xx <- rnorm(100)
var(cbind(tt,xx))
tt1 <- scale(tt)
xx1 <- scale(xx)
solve(var(cbind(tt,xx))) %*% c(0.01,0.02)
t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% cbind(tt,xx)
t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02))
t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx)
c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx))
plot(c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx)))
plot(c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx)),)
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))
c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx))
xx1 <- c(scale(xx))
tt1 <- c(scale(tt))
c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx),
t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))
plot(c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx)),
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1)))
plot(c(t(solve(var(cbind(tt,xx))) %*% c(0.01,0.02)) %*% rbind(tt,xx)),
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))); abline(a=0,b=1)
var(cbind(tt,xx)))
var(cbind(tt,xx))
var(cbind(tt1,xx1))
solve(var(cbind(tt1,xx1)))
solve(var(cbind(tt,xx)))
cbind(tt1,xx1)
cbind(tt1,xx1) %*% chol(matrix(c(1,-0.3,-0.3,1)))
chol(matrix(c(1,-0.3,-0.3,1))) %*% t(chol(matrix(c(1,-0.3,-0.3,1))))
chol(matrix(c(1,-0.3,-0.3,1), ncol = 3)) %*% t(chol(matrix(c(1,-0.3,-0.3,1), ncol = 3)))
chol(matrix(c(1,-0.3,-0.3,1), ncol = 2)) %*% t(chol(matrix(c(1,-0.3,-0.3,1), ncol = 2)))
t(chol(matrix(c(1,-0.3,-0.3,1), ncol = 2))) %*% (chol(matrix(c(1,-0.3,-0.3,1), ncol = 2)))
cbind(tt,xx) %*% t(chol(matrix(c(1,-0.3,-0.3,1), ncol = 2)))
yy <- cbind(tt,xx) %*% t(chol(matrix(c(1,-0.3,-0.3,1), ncol = 2)))
var(yy)
plot(c(t(solve(var(yy)) %*% c(0.01,0.02)) %*% yy),
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))); abline(a=0,b=1)
plot(c(t(solve(var(yy)) %*% c(0.01,0.02)) %*% t(yy)),
c(t(solve(var(cbind(tt1,xx1))) %*% c(0.01,0.02)) %*% rbind(tt1,xx1))); abline(a=0,b=1)
dd <- scale(yy)
plot(c(t(solve(var(yy)) %*% c(0.01,0.02)) %*% t(yy)),
c(t(solve(var(dd)) %*% c(0.01,0.02)) %*% t(dd))); abline(a=0,b=1)
plot(c(t(solve(var(yy)) %*% c(0.01,0)) %*% t(yy)),
c(t(solve(var(dd)) %*% c(0.01,0)) %*% t(dd))); abline(a=0,b=1)
-log10(0.05)
-log10(0.05/1279)
-log10(0.0001)
-log10(0.00001)
save.image()
