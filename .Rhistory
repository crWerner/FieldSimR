colnames(error.df)[grep("env|block|col|row", tolower(colnames(error.df)))] <- tolower(colnames(error.df))[grep("env|block|col|row", tolower(colnames(error.df)))]
if (any(!c("env", "rep", "id") %in% colnames(gv.df))) {
stop("'gv.df' must contain the columns 'env', 'rep', 'id', and the genetic values for each trait")
}
colnames(error.df)[grep("column", colnames(error.df))] <- "col"
if (any(!c("env", "block", "col", "row") %in% colnames(error.df))) {
stop("'error.df' must contain the columns 'env', 'block', 'col', 'row', and the plot errors for each trait")
}
ntraits <- ncol(gv.df) - 3
if (ncol(error.df) - 4 != ntraits) {
stop("'gv.df' must contain the columns 'env', 'rep', 'id', and the genetic values for each trait.
'error.df' must contain the columns 'env', 'block', 'col', 'row', and the plot errors for each trait")
}
error.df$env <- factor(as.numeric(as.character(error.df$env)))
error.df$block <- factor(as.numeric(as.character(error.df$block)))
error.df$col <- factor(as.numeric(as.character(error.df$col)))
error.df$row <- factor(as.numeric(as.character(error.df$row)))
error.df <- error.df[order(error.df$env, error.df$block), ]
gv.df$env <- factor(as.numeric(as.character(gv.df$env)))
gv.df$rep <- factor(as.numeric(as.character(gv.df$rep)))
gv.df$id <- factor(as.numeric(as.character(gv.df$id)))
gv.df <- gv.df[order(gv.df$env, gv.df$rep), ]
if (randomise) {
id <- unique(gv.df$id)
nblocks_total <- nrow(gv.df) / length(id)
gv.df$ord <- unlist((lapply(seq_len(nblocks_total), function(x) sample(id))))
gv.df <- gv.df[order(gv.df$env, gv.df$rep, gv.df$ord), ]
}
y <- error.df[, !(colnames(error.df) %in% c("env", "block", "col", "row"))] +
gv.df[, !(colnames(gv.df) %in% c("env", "rep", "id", "ord"))]
error.df.names <- error.df[, c("env", "block", "col", "row")]
ids <- factor(as.numeric(as.character(gv.df$id)))
pheno_df <- cbind(
error.df.names,
id = ids,
y
)
pheno_df <- pheno_df[order(pheno_df$env, pheno_df$col, pheno_df$row), ]
colnames(pheno_df) <- c("env", "block", "col", "row", "id", paste0("y.Trait", 1:ntraits))
listNames <- c("pheno.df", "gv.df", "error.df")
gv.df
gv.df
# listNames <- c("pheno.df", "gv.df", "error.df")
list_names <- c("pheno.df", paste0("Trait", 1:ntraits))
head(gv.df)
gv.df <- unique(gv.df)
nrow(gv.df)
nrow(error.df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
reps <- factor(as.numeric(as.character(gv.df$rep)))
pheno_df <- cbind(
error.df.names,
id = ids,
rep = reps,
y
)
head(pheno_df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- cbind(
error.df.names,
id = ids,
y
)
pheno_df <- pheno_df[order(pheno_df$env, pheno_df$col, pheno_df$row), ]
colnames(pheno_df) <- c("env", "block", "col", "row", "id", paste0("y.Trait", 1:ntraits))
# listNames <- c("pheno.df", "gv.df", "error.df")
list_names <- c("pheno.df", paste0("Trait", 1:ntraits))
# listNames <- c("pheno.df", "gv.df", "error.df")
head(pheno_df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
seq_len(ntraits)
gv.df
# listNames <- c("pheno.df", "gv.df", "error.df")
head(pheno_df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv.df[,6:(ntraits + 6)]
ntraits
gv.df[,6:(ntraits + 5)]
6:(ntraits + 5)
gv.df
pheno_df[,6:(ntraits + 5)]
blank_df <- pheno_df[,1:5]
blank_df
error.df.names
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
rownames(pheno_df) <- NULL
blank_df <- pheno_df[,1:5]
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
# listNames <- c("pheno.df", "gv.df", "error.df")
head(blank_df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
head(blank_df)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
head(blank_df)
seq_len(ntraits)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
seq_len(ntraits)
gv.df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df[,1:5]
lapply(seq_len(ntraits), pheno_df[,1:5])
lapply(seq_len(ntraits), function(x) pheno_df[,1:5])
blank_ls <- lapply(seq_len(ntraits), function(x) pheno_df[,1:5])
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
lapply(seq_len(1), function(x) pheno_df[,1:5])
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
blank_ls <- lapply(seq_len(ntraits), function(x) pheno_df[,1:5])
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv.df
gv.df[,4:(ntraits + 3)]
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
error.df[,4:(ntraits + 3)]
error.df[,5:(ntraits + 4)]
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv.df[,4:(ntraits + 3)]
as.list(gv.df[,4:(ntraits + 3)])
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv_ls <- as.list(gv.df[,4:(ntraits + 3)])
error_ls <- as.list(error.df[,5:(ntraits + 4)])
gv_ls
error_ls <- as.list(error.df[,5:(ntraits + 4)])
error_ls
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
as.list(gv.df[,4])
gv.df[,4]
as.list(cbind(gv.df[,4]))
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
as.list(as.matrix(gv.df[,4]))
as.list(matrix(gv.df[,4]))
as.list(as.data.frame(matrix(gv.df[,4])))
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
as.list(as.data.frame((gv.df[,4])))
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
as.list(as.data.frame(matrix(gv.df[,4])))
gv_ls <- as.list(as.data.frame(matrix(gv.df[, 4:(ntraits + 3)])))
error_ls <- as.list(error.df[, 5:(ntraits + 4)])
gv_ls
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv_ls
blank_ls
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
c(blank_ls, gv_ls)
cbind(blank_ls, gv_ls)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls)
gv_ls
blank_ls <- lapply(seq_len(ntraits), function(x) pheno_df[,1:5])
gv_ls <- as.list(as.data.frame(matrix(gv.df[, 4:(ntraits + 3)])))
gv_ls
as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
as.list(as.data.frame(gv.df[, 4]))
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
error_ls <- as.list(as.data.frame(error.df[, 5:(ntraits + 4)]))
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls)
gv_ls
error_ls
pheno_df[,1:5]
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls)
pheno_df[,1:5]
cbind(pheno_df[,1:5], gv_ls[[1]])
cbind(pheno_df[,1:5], gv_ls[[1]], error_ls[[1]])
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls)
gv_ls
blank_ls
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
error_ls <- as.list(as.data.frame(error.df[, 5:(ntraits + 4)]))
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls)
mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
error_ls <- as.list(as.data.frame(error.df[, 5:(ntraits + 4)]))
effects_df <- mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
effects_df
gv_ls <- as.list(as.data.frame(gv.df[, 4]))
error_ls <- as.list(as.data.frame(error.df[, 5]))
effects_df <- mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
effects_df
list_names <- c("pheno.df", paste0("Trait", 1:1))
list_names
c(list(pheno_df), effects_df)
pheno_df <- c(list(pheno_df), effects_df)
names(pheno_df) <- listNames
pheno_df
names(pheno_df)
listNames
list_names
names(pheno_df) <- list_names
pheno_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/compound_symmetry_gxe.R")
pheno_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
effects_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
seq_len(ntraits)
effects_df <-  mapply(function(x,y) {
colnames(x)[6:(ntraits + 5)] <- c(paste0("gv.Trait", y), paste0("e.Trait", y))
x
}, x = effects_df, y = seq_len(ntraits))
effects_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
effects_df <-  mapply(function(x,y) {
colnames(x)[6:(ntraits + 5)] <- c(paste0("gv.Trait", y), paste0("e.Trait", y))
x
}, x = effects_df, y = seq_len(ntraits), SIMPLIFY = FALSE)
effects_df <- mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
pheno_df <- pheno_df[order(pheno_df$env, pheno_df$col, pheno_df$row), ]
rownames(pheno_df) <- NULL
pheno_df <- cbind(
error.df.names,
id = ids,
y
)
pheno_df <- pheno_df[order(pheno_df$env, pheno_df$col, pheno_df$row), ]
rownames(pheno_df) <- NULL
colnames(pheno_df) <- c("env", "block", "col", "row", "id", paste0("y.Trait", 1:ntraits))
gv_ls <- as.list(as.data.frame(gv.df[, 4]))
error_ls <- as.list(as.data.frame(error.df[, 5]))
effects_df <- mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
effects_df <-  mapply(function(x,y) {
colnames(x)[6:(ntraits + 5)] <- c(paste0("gv.Trait", y), paste0("e.Trait", y))
x
}, x = effects_df, y = seq_len(ntraits), SIMPLIFY = FALSE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
effects_df
list_names <- c("pheno.df", paste0("Trait", 1:ntraits))
pheno_df <- c(list(pheno_df), effects_df)
names(pheno_df) <- list_names
pheno_df[[1]]
pheno_df[[2]]
pheno_df[[3]]
plot(effects_df[[1]])
plot(pheno_df$Trait1$gv.Trait1, pheno_df$Trait2$gv.Trait2)
gv_ls[[1]]
gv_ls[[2]]
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
error_ls <- as.list(as.data.frame(error.df[, 5:(ntraits + 4)]))
pheno_df <- cbind(
error.df.names,
id = ids,
y
)
pheno_df <- pheno_df[order(pheno_df$env, pheno_df$col, pheno_df$row), ]
rownames(pheno_df) <- NULL
colnames(pheno_df) <- c("env", "block", "col", "row", "id", paste0("y.Trait", 1:ntraits))
gv_ls <- as.list(as.data.frame(gv.df[, 4:(ntraits + 3)]))
error_ls <- as.list(as.data.frame(error.df[, 5:(ntraits + 4)]))
effects_df <- mapply(function(x,y) cbind(pheno_df[,1:5], x, y), x = gv_ls, y = error_ls, SIMPLIFY = FALSE)
effects_df <-  mapply(function(x,y) {
colnames(x)[6:(ntraits + 5)] <- c(paste0("gv.Trait", y), paste0("e.Trait", y))
x
}, x = effects_df, y = seq_len(ntraits), SIMPLIFY = FALSE)
list_names <- c("pheno.df", paste0("Trait", 1:ntraits))
pheno_df <- c(list(pheno_df), effects_df)
names(pheno_df) <- list_names
head(pheno_df$pheno.df)
head(pheno_df$Trait1)
plot(pheno_df$pheno.df$y.Trait1, pheno_df$Trait1$gv.Trait1 + pheno_df$Trait1$e.Trait1)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait1$gv.Trait2 + pheno_df$Trait1$e.Trait2)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv.df = gv_df_unstr,
error.df = error_df_bivar,
randomise = TRUE
)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv.df = gv_df_unstr,
error.df = error_df_bivar,
randomise = TRUE,
return.effects = FALSE
)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv.df = gv_df_unstr,
error.df = error_df_bivar,
randomise = TRUE,
return.effects = TRUE
)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
gv_df_unstr
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
error_df
qq_plot(
df = error_df$e.Trait1,
effect = "e.Trait1",
labels = TRUE
)
qq_plot(
df = error_df$e.Trait1,
effect = "e.Trait1",
labels = F
)
error_df$e.Trait1
df = error_df$e.Trait1
if (is.vector(df)) {
df <- data.frame(eff = c(df))
effect <- "eff"
}
df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
qq_plot(
df = error_df$e.Trait1,
effect = "e.Trait1",
labels = F
)
error_df$e.Trait1
df = error_df$e.Trait1
effect = "e.Trait1"
labels = F
if (is.vector(df)) {
df <- data.frame(eff = c(df))
effect <- "eff"
}
if (!is.data.frame(df)) {
stop("'df' must be a data frame")
}
colnames(df) <- tolower(colnames(df))
effect <- tolower(effect)
colnames(df)[colnames(df) %in% effect] <- "eff"
if (!("eff" %in% colnames(df))) {
stop("'df' must contain the effect to be plotted")
}
if (!labels) {
qq_df <- data.frame(effect = df[["eff"]])
p <- ggplot2::ggplot(qq_df, ggplot2::aes(sample = effect)) +
ggplot2::stat_qq()
qq_df <- data.frame(
ggplot2::ggplot_build(p)$data[[1]]["sample"],
ggplot2::ggplot_build(p)$data[[1]]["theoretical"]
)
mid_pt_x <- mean(qq_df$theoretical, na.rm = TRUE)
max_pt_x <- max(abs(c(mid_pt_x - min(df$theoretical, na.rm = TRUE), max(df$theoretical, na.rm = TRUE) - mid_pt_x)), na.rm = TRUE) + 1e-8
p <- ggplot2::ggplot(data = qq_df, ggplot2::aes(x = theoretical, y = sample)) +
ggplot2::stat_qq_line(data = qq_df, ggplot2::aes(sample = sample), colour = "steelblue", linewidth = 0.75, inherit.aes = F) +
ggplot2::geom_point(size = 2) +
ggplot2::labs(y = "Sample quantiles", x = "Theoretical quantiles") +
ggplot2::theme(
plot.title = ggplot2::element_text(margin = ggplot2::margin(t = 4, r = 0, b = 6, l = 0), size = 12, colour = "gray40"),
axis.title.x = ggplot2::element_text(margin = ggplot2::margin(t = 6, r = 0, b = 0, l = 0), size = 11),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(t = 0, r = 4, b = 0, l = 0), size = 11),
axis.text = ggplot2::element_text(size = 10)
) +
ggplot2::lims(x = c(mid_pt_x - max_pt_x, mid_pt_x + max_pt_x))
return(p)
}
p
mid_pt_x
max_pt_x
max_pt_x
mid_pt_x
df$theoretical
qq_df <- data.frame(effect = df[["eff"]])
qq_df
p <- ggplot2::ggplot(qq_df, ggplot2::aes(sample = effect)) +
ggplot2::stat_qq()
qq_df <- data.frame(
ggplot2::ggplot_build(p)$data[[1]]["sample"],
ggplot2::ggplot_build(p)$data[[1]]["theoretical"]
)
qq_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
qq_plot(
df = error_df$e.Trait1,
effect = "e.Trait1",
labels = F
)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = FALSE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
?ggsubtitle
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
?subtitle
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/plot_effects.R")
qq <- qq_plot(
df = error_df,
effect = "e.Trait1",
labels = TRUE
)
# Q-Q plot
qq
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
document()
check()
?bend
check()
check()
devtools::build(vignettes=TRUE)
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
document()
check()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
# Create checklist
usethis::use_release_issue()
# Create checklist
usethis::use_release_issue()
## Most recent recommended testing pipeline
devtools::spell_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran(email = "werner.christian@proton.me", platforms = "debian-gcc-devel")
devtools::check_rhub() # Used for cran-comments.md
library(revdepcheck)
revdepcheck::revdep_check(num_workers = 4)
