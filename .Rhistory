pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Environmental Covariate", y = "Effect")
pp
nterms/3:5
is.integer(nterms/3:5)
nterms/3:5
(nterms/3:5)%% 1
(nterms/3:5) %% 1 != 0
which((nterms/3:5) %% 1 == 0)
which((nterms/3:5) %% 1 == 0)[1]
(nterms/3:5) %% 1 == 0
3:5[(nterms/3:5) %% 1 == 0][1]
nterms/3:5 %% 1 == 0
nterms/3:5
nterms/3:5 %% 1
nterms/(3:5)
nterms/(3:5) %% 1 == 0
(nterms/3:5) %% 1 == 0
3:5[(nterms/3:5) %% 1 == 0][1]
(3:5)[(nterms/3:5) %% 1 == 0][1]
(3:5)[(1:100/3:5) %% 1 == 0][1]
((1:100)/3:5) %% 1 == 0
for(j in 1:100){print(((1:j)/3:5) %% 1 == 0)}
((1:j)/3:5) %% 1 == 0
for(j in 1:100){print(((j)/3:5) %% 1 == 0)}
for(j in 1:100){print(((j)/2:5) %% 1 == 0)}
for(j in 1:100){print(sum(((j)/2:5) %% 1 == 0))}
facet_cols <- (2:5)[(nterms/2:5) %% 1 == 0]
facet_cols
facet_cols <- (2:5)[(nterms/2:5) %% 1 == 0][1]
facet_cols
pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Environmental Covariate", y = "Effect")
pp
df <- df[df$id %in% 1:10,]
pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Environmental Covariate", y = "Effect")
pp
df <- df[df$id %in% 1:3,]
pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Environmental Covariate", y = "Effect")
pp
pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Environmental covariate", y = "Effect")
pp
pp <- ggplot2::ggplot(data = df, ggplot2::aes(x = cov, y = reg.line, group = id, colour = id)) +
ggplot2::geom_line() +
ggplot2::geom_point(data = df, ggplot2::aes(x = cov, y = total.effect, group = id, colour = id)) +
facet_wrap(~term, ncol = facet_cols) +
labs(x = "Covariate", y = "Effect")
pp
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
load("~/Documents/EIB/0FieldSimR/fieldsimr/data/gv_df_unstr.rda")
head(gv_df_unstr)
load("~/Documents/EIB/0FieldSimR/fieldsimr/data/error_df_bivar.rda")
head(error_df_bivar)
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
$stdout
## ----setup, include = FALSE---------------------------------------------------
library(AlphaSimR)
library(FieldSimR)
library(ggplot2)
## -----------------------------------------------------------------------------
ntraits <- 2 # Number of traits
nenvs <- 3 # Number of environments
nblocks <- c(2, 2, 3) # Number of blocks per environment
block_dir <- "col" # Arrangement of blocks ("side-by-side")
ncols <- c(10, 10, 15) # Number of columns per environment
nrows <- 20 # Number of rows per environment
plot_length <- 8 # Plot length; here in meters (column direction)
plot_width <- 2 # Plot width; here in meters (row direction)
## -----------------------------------------------------------------------------
H2 <- c(0.3, 0.3, 0.3, 0.5, 0.5, 0.5) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
## -----------------------------------------------------------------------------
var <- c(0.086, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
## -----------------------------------------------------------------------------
# Calculation of error variances based on the genetic variance and target heritability vectors.
calc_varR <- function(var, H2) {
varR <- (var / H2) - var
return(varR)
}
varR <- calc_varR(var, H2)
round(varR, 2) # Vector of error variances: c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
## -----------------------------------------------------------------------------
spatial_model <- "Bivariate" # Spatial error model.
prop_spatial <- 0.4 # Proportion of spatial trend.
ScorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE)
round(ScorR, 2)
## -----------------------------------------------------------------------------
ext_ord <- "zig-zag"
ext_dir <- "row"
prop_ext <- 0.2
EcorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE)
round(EcorR, 2)
## -----------------------------------------------------------------------------
error_ls <- field_trial_error(
ntraits = ntraits,
nenvs = nenvs,
nblocks = nblocks,
block.dir = block_dir,
ncols = ncols,
nrows = nrows,
plot.length = plot_length,
plot.width = plot_width,
varR = varR,
ScorR = ScorR,
EcorR = EcorR,
RcorR = NULL,
spatial.model = spatial_model,
prop.spatial = prop_spatial,
ext.ord = ext_ord,
ext.dir = ext_dir,
prop.ext = prop_ext,
return.effects = TRUE
)
## -----------------------------------------------------------------------------
e_total_env1 <- error_ls$error.df[error_ls$error.df$env == 1, ]
e_terms_env1 <- error_ls$Trait1[error_ls$Trait1$env == 1, ]
## ----fig.height = 4, fig.width = 9, fig.align = "center"----------------------
plot_effects(e_total_env1, effect = "e.Trait1", labels = TRUE)
## ----fig.height = 4, fig.width = 9, fig.align = "center"----------------------
plot_effects(e_terms_env1, effect = "e.spat", labels = TRUE)
## ----fig.height = 4, fig.width = 9, fig.align = "center"----------------------
plot_effects(e_terms_env1, effect = "e.rand", labels = TRUE)
## ----fig.height = 4, fig.width = 9, fig.align = "center"----------------------
plot_effects(e_terms_env1, effect = "e.ext.row")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
load("~/Documents/EIB/0FieldSimR/fieldsimr/data/gv_df_unstr.rda")
library(AlphaSimR)
library(FieldSimR)
library(ggplot2)
ntraits <- 2 # Number of traits
nenvs <- 3 # Number of environments
nblocks <- c(2, 2, 3) # Number of blocks per environment
block_dir <- "col" # Arrangement of blocks ("side-by-side")
ncols <- c(10, 10, 15) # Number of columns per environment
nrows <- 20 # Number of rows per environment
plot_length <- 8 # Plot length; here in meters (column direction)
plot_width <- 2 # Plot width; here in meters (row direction)
H2 <- c(0.3, 0.3, 0.3, 0.5, 0.5, 0.5) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
var <- c(0.086, 0.12, 0.06, 15.1, 8.5, 11.7) # c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
# Calculation of error variances based on the genetic variance and target heritability vectors.
calc_varR <- function(var, H2) {
varR <- (var / H2) - var
return(varR)
}
varR <- calc_varR(var, H2)
round(varR, 2) # Vector of error variances: c(Yld:E1, Yld:E2, Yld:E3, Pht:E1, Pht:E2, Pht:E3)
spatial_model <- "Bivariate" # Spatial error model.
prop_spatial <- 0.4 # Proportion of spatial trend.
ScorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE)
round(ScorR, 2)
ext_ord <- "zig-zag"
ext_dir <- "row"
prop_ext <- 0.2
EcorR <- rand_cor_mat(ntraits, min.cor = 0, max.cor = 0.5, pos.def = TRUE)
round(EcorR, 2)
error_ls <- field_trial_error(
ntraits = ntraits,
nenvs = nenvs,
nblocks = nblocks,
block.dir = block_dir,
ncols = ncols,
nrows = nrows,
plot.length = plot_length,
plot.width = plot_width,
varR = varR,
ScorR = ScorR,
EcorR = EcorR,
RcorR = NULL,
spatial.model = spatial_model,
prop.spatial = prop_spatial,
ext.ord = ext_ord,
ext.dir = ext_dir,
prop.ext = prop_ext,
return.effects = TRUE
)
e_total_env1 <- error_ls$error.df[error_ls$error.df$env == 1, ]
e_terms_env1 <- error_ls$Trait1[error_ls$Trait1$env == 1, ]
plot_effects(e_total_env1, effect = "e.Trait1", labels = TRUE)
plot_effects(e_terms_env1, effect = "e.spat", labels = TRUE)
plot_effects(e_terms_env1, effect = "e.rand", labels = TRUE)
plot_effects(e_terms_env1, effect = "e.ext.row")
gv_df <- gv_df_unstr
pheno_df <- make_phenotypes(
gv_df,
error_ls$error.df,
randomise = TRUE
)
gv_df
error_ls$error.df
gv_df
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv_df,
error_ls$error.df,
randomise = TRUE
)
make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df,
randomise = T,
return.effects = T)
error_df <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 2,
ncols = 10,
nrows = c(10,10,12))
gv_df <- droplevels(gv_df_unstr[gv_df_unstr$rep %in% 1:2,])
sample1 <- sample(levels(gv_df$id), 50)
sample2 <- levels(gv_df$id)[!levels(gv_df$id) %in% sample1]
length(unique(c(sample1, sample2)))
sample3 <- sample(levels(gv_df$id), 60)
gv_df1 <- gv_df[gv_df$env == 1 & gv_df$id %in% sample1,]
gv_df2 <- gv_df[gv_df$env == 2 & gv_df$id %in% sample2,]
gv_df3 <- gv_df[gv_df$env == 3 & gv_df$id %in% sample3,]
gv_df <- rbind(gv_df1, gv_df2, gv_df3)
head(gv_df)
nrow(gv_df)
table(gv_df$env)
nlevels(gv_df$id)
pheno_df <- make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df,
randomise = T,
return.effects = T)
head(pheno_df$pheno.df)
head(pheno_df$Trait1)
rm(gv_df)
rm(error_df)
nrow(gv_df)
gv_df <- gv_df_unstr
pheno_df <- make_phenotypes(
gv_df,
error_ls$error.df,
randomise = TRUE
)
gv_df
error_ls$error.df
nrow(error_ls$error.df)
nrow(gv_df)
pheno_df <- make_phenotypes(
gv_df,
error_ls$error.df,
randomise = F
)
design.df = NULL
return.effects = FALSE
gv.df <- gv_df
error.df <- error_ls$error.df
if (inherits(gv.df, "list")) gv.df <- gv.df[[1]]
if (inherits(error.df, "list")) error.df <- error.df[[1]]
if (!is.data.frame(gv.df)) {
stop("'gv.df' must be a data frame")
}
if (!is.data.frame(error.df)) {
stop("'error.df' must be a data frame")
}
colnames(gv.df)[grep("env|rep|id", tolower(colnames(gv.df)))] <- tolower(colnames(gv.df))[grep("env|rep|id", tolower(colnames(gv.df)))]
colnames(error.df)[grep("env|block|col|row", tolower(colnames(error.df)))] <- tolower(colnames(error.df))[grep("env|block|col|row", tolower(colnames(error.df)))]
if (any(!c("env", "rep", "id") %in% colnames(gv.df))) {
stop("'gv.df' must contain the columns 'env', 'rep', 'id', and the genetic values for each trait")
}
colnames(error.df)[grep("column", colnames(error.df))] <- "col"
if (any(!c("env", "block", "col", "row") %in% colnames(error.df))) {
stop("'error.df' must contain the columns 'env', 'block', 'col', 'row', and the plot errors for each trait")
}
ntraits <- ncol(gv.df) - 3
if (ncol(error.df) - 4 != ntraits) {
stop("Number of traits in 'gv.df' must match number of traits in 'error.df'")
}
design <- FALSE
if (!is.null(design.df)) {
design <- TRUE
if (inherits(design.df, "table")) {
design.df <- as.data.frame(t(design.df))
colnames(design.df) <- c("env", "id", "nreps")
}
if (!is.data.frame(design.df)) {
stop("'design.df' must be a data frame")
}
colnames(design.df)[grep("env|id|nreps", tolower(colnames(design.df)))] <- tolower(colnames(design.df))[grep("env|id|nreps", tolower(colnames(design.df)))]
if (any(!c("env", "id", "nreps") %in% colnames(design.df))) {
stop("'design.df' must contain the columns 'env', 'id' and 'nreps'")
}
}
error.df$env <- factor(as.numeric(as.character(error.df$env)))
error.df$block <- factor(as.numeric(as.character(error.df$block)))
error.df$col <- factor(as.numeric(as.character(error.df$col)))
error.df$row <- factor(as.numeric(as.character(error.df$row)))
error.df <- error.df[order(error.df$env, error.df$block), ]
error.df <- unique(error.df)
rownames(error.df) <- NULL
gv.df$env <- factor(as.numeric(as.character(gv.df$env)))
gv.df$id <- factor(as.numeric(as.character(gv.df$id)))
gv.df$block <- gv.df$rep <- factor(as.numeric(as.character(gv.df$rep)))
gv.df <- gv.df[order(gv.df$env, gv.df$block), ]
gv.df <- unique(gv.df)
rownames(gv.df) <- NULL
if (design) {
design.df <- droplevels(design.df[design.df$nreps != 0, ])
design.df$env <- factor(as.numeric(as.character(design.df$env)))
design.df$id <- factor(as.numeric(as.character(design.df$id)))
design.df$nreps <- factor(as.numeric(as.character(design.df$nreps)))
design.df <- design.df[order(design.df$env, design.df$id), ]
design.df <- unique(design.df)
rownames(design.df) <- NULL
if (any(duplicated(design.df[, c("env", "id")]))) {
stop("Individuals must not have multiple entries in 'design.df' for each environment")
}
design_reps <- with(design.df, tapply(nreps, env, unique))
error_blocks <- with(error.df, tapply(block, env, function(x) c(0, 1, max(as.numeric(as.character(x))))))
reps_conform <- mapply(function(x, y) any(!x %in% y), x = design_reps, y = error_blocks)
if (any(reps_conform)) {
stop("Number of replicates in 'design.df' must be 0, 1 or match number of blocks in 'error.df' for each environment")
}
design_plots <- with(design.df, tapply(nreps, env, function(x) sum(as.numeric(as.character(x)))))
error_plots <- with(error.df, table(env))
if (any(design_plots - error_plots != 0)) {
stop("Number of plots dictated by 'design.df' must match number of plots in 'error.df' for each environment")
}
gv_env_names <- levels(gv.df[["env"]])
design_env_names <- levels(design.df[["env"]])
if (length(gv_env_names) != length(design_env_names)) {
stop("Number of environments in 'gv.df' and 'design.df' must match")
}
if (any(gv_env_names != design_env_names)) {
stop("'env' names in 'gv.df' and 'design.df' must match")
}
gv_id_names <- with(gv.df, tapply(id, env, unique))
design_id_names <- with(design.df, tapply(id, env, unique))
missing_names <- mapply(function(x, y) any(!x %in% y), x = design_id_names, y = gv_id_names)
if (any(missing_names)) {
stop("All 'id' names in 'design.df' must be present in 'gv.df' for relevant environments")
}
gv.df$env.id <- paste0(gv.df$env, ":", gv.df$id)
design.df$env.id <- paste0(design.df$env, ":", design.df$id)
gv.df <- gv.df[gv.df$env.id %in% unique(design.df$env.id), ]
gv.df <- gv.df[order(gv.df$env, gv.df$id), ]
rownames(gv.df) <- NULL
gv_reps <- as.data.frame(with(gv.df, table(id, env)))
nreps <- as.numeric(as.character(design.df$nreps))
if (any(nreps != gv_reps$Freq[gv_reps$Freq != 0])) {
gv.df <- gv.df[!duplicated(gv.df$env.id), ]
gv.df <- gv.df[rep(rownames(gv.df), times = nreps), ]
}
gv.df$block <- gv.df$rep <- factor(unlist(lapply(nreps, function(x) 1:x)))
gv_blocks <- with(gv.df, tapply(block, env, function(x) 1:max(as.numeric(as.character(x))), simplify = FALSE))
nleftovers <- table(design.df$env[design.df$nreps == 1]) / unlist(lapply(gv_blocks, function(x) max(x)))
gv.df$block[gv.df$env.id %in% design.df$env.id[design.df$nreps == 1]] <- unlist(mapply(function(x, y) sample(rep(x, each = y)), x = gv_blocks, y = nleftovers))
gv.df <- gv.df[order(gv.df$env, gv.df$block, gv.df$id), ]
gv.df$env.id <- NULL
gv.df <- unique(gv.df)
rownames(gv.df) <- NULL
}
nenvs <- nlevels(gv.df$env)
if (nlevels(error.df$env) != nenvs) {
stop("Number of environments in 'gv.df' must match number of environments in 'error.df'")
}
if (nrow(gv.df) != nrow(error.df)) {
gv.df$env.id <- paste0(gv.df$env, ":", gv.df$id)
gv.df <- gv.df[!duplicated(gv.df$env.id), ]
gv_id_names <- with(gv.df, tapply(id, env, function(x) length(unique(x))))
block_plots <- with(error.df[error.df$block == 1, ], tapply(block, env, length))
if (all(gv_id_names - block_plots == 0)) {
error_blocks <- with(error.df, tapply(block, env, function(x) max(as.numeric(as.character(x)))))
nreps <- rep(error_blocks, times = gv_id_names)
gv.df <- gv.df[rep(rownames(gv.df), times = nreps), ]
gv.df$block <- gv.df$rep <- factor(unlist(lapply(nreps, function(x) 1:x)))
gv.df <- gv.df[order(gv.df$env, gv.df$block, gv.df$id), ]
rownames(gv.df) <- NULL
gv.df$env.id <- NULL
} else {
stop("Number of rows in 'gv.df' and 'error.df' do not match (after removing duplicated entries)")
}
}
gv_reps <- with(gv.df, tapply(block, list(block, env), length))
error_blocks <- with(error.df, tapply(block, list(block, env), length))
if (any(dim(gv_reps) - dim(error_blocks) != 0)) {
stop("Number of replicates in 'gv.df' must match number of blocks in 'error.df' for each environment")
}
if (any(gv_reps - error_blocks != 0)) {
stop("Number of individuals per replicate in 'gv.df' must match number of plots per block in 'error.df' for each environment")
}
gv_reps
error_blocks
gv_reps - error_blocks
gv_reps - error_blocks != 0
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
pheno_df <- make_phenotypes(
gv_df,
error_ls$error.df,
randomise = TRUE
)
pheno_env1 <- pheno_df[pheno_df$env == 1, ] # Extract phenotypes in environment 1.
plot_effects(pheno_env1, effect = "y.Trait1")
ggplot(pheno_env1, aes(x = y.Trait1, fill = factor(block))) +
geom_histogram(color = "#e9ecef", alpha = 0.8, position = "identity", bins = 50) +
scale_fill_manual(values = c("violetred3", "goldenrod3", "skyblue2")) +
labs(x = "Phenotypes for grain yield (t/ha)", y = "Count", fill = "Block")
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/make_phenotypes.R")
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::document()
devtools::check()
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#styler::style_dir()
# find correct uni-code
#stringi::stri_escape_unicode()
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
devtools::build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
# Create checklist
usethis::use_release_issue()
## Most recent recommended testing pipeline
usethis::use_github_links()
devtools::spell_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran(email = "uow.tolhurst@gmail.com", platforms = "debian-gcc-devel")
devtools::check_rhub(email = "uow.tolhurst@gmail.com") # Used for cran-comments.md
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
devtools::build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
## Most recent recommended testing pipeline
usethis::use_github_links()
devtools::spell_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
source("~/Documents/EIB/0FieldSimR/fieldsimr/R/multiplicative_gxe.R")
error_df <- error_df_bivar[error_df_bivar$env == 1, ]
plot_hist(
df = error_df,
value = "e.Trait1",
density = TRUE
)
plot_hist(matrix(1:20, ncol = 5))
qq_plot(matrix(1:20, ncol = 5))
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
library(Rcpp)
library(RcppArmadillo)
install.packages(c("ape", "backports", "brio", "broom", "codetools", "cranlike", "crayon", "cubature", "dae", "DBI", "debugme", "downlit", "edibble", "fields", "foreign", "ggsci", "gh", "googleAuthR", "httpuv", "httr2", "ieugwasr", "KernSmooth", "lattice", "lme4", "MCMCglmm", "MendelianRandomization", "minqa", "nlme", "nloptr", "openssl", "pbkrtest", "pkgdown", "pkgload", "promises", "ps", "psych", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "remotes", "reprex", "rhub", "robustbase", "roxygen2", "RSQLite", "rstudioapi", "shiny", "SparseM", "stringi", "styler", "survival", "systemfonts", "testthat", "textshaping", "tidytext", "ucminf", "xopen"))
install.packages(c("ape", "backports", "brio", "broom", "codetools", "cranlike", "crayon", "cubature", "dae", "DBI", "debugme", "downlit", "edibble", "fields", "foreign", "ggsci", "gh", "googleAuthR", "httpuv", "httr2", "ieugwasr", "KernSmooth", "lattice", "lme4", "MCMCglmm", "MendelianRandomization", "minqa", "nlme", "nloptr", "openssl", "pbkrtest", "pkgdown", "pkgload", "promises", "ps", "psych", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "remotes", "reprex", "rhub", "robustbase", "roxygen2", "RSQLite", "rstudioapi", "shiny", "SparseM", "stringi", "styler", "survival", "systemfonts", "testthat", "textshaping", "tidytext", "ucminf", "xopen"))
install.packages(c("ape", "backports", "brio", "broom", "codetools", "cranlike", "crayon", "cubature", "dae", "DBI", "debugme", "downlit", "edibble", "fields", "foreign", "ggsci", "gh", "googleAuthR", "httpuv", "httr2", "ieugwasr", "KernSmooth", "lattice", "lme4", "MCMCglmm", "MendelianRandomization", "minqa", "nlme", "nloptr", "openssl", "pbkrtest", "pkgdown", "pkgload", "promises", "ps", "psych", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "remotes", "reprex", "rhub", "robustbase", "roxygen2", "RSQLite", "rstudioapi", "shiny", "SparseM", "stringi", "styler", "survival", "systemfonts", "testthat", "textshaping", "tidytext", "ucminf", "xopen"))
library(Rcpp)
detach("package:Rcpp", unload = TRUE)
install.packages(c("httr2", "pkgdown", "Rcpp", "RcppArmadillo", "SparseM"))
