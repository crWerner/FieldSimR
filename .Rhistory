#'   nenvs = 2,
#'   nreps = 2
#' )
#'
#' @export
unstr_asr_output <- function(pop,
ntraits = 1,
nenvs,
nreps = 1) {
if (ntraits < 1 | ntraits %% 1 != 0) stop("'ntraits' must be a positive integer")
if (nenvs < 2 | nenvs %% 1 != 0) stop("'nenvs' must be an integer > 1")
if ((sum(nreps < 1) > 0) | (sum(nreps %% 1 != 0) > 0)) {
stop("'nreps' must contain positive integers")
}
if (length(nreps) == 1) nreps <- rep(nreps, nenvs)
envs <- factor(rep(1:nenvs, times = length(pop@id) * nreps))
reps <- factor(unlist(lapply(nreps, function(x) rep(1:x, each = length(pop@id)))))
if (all(!grepl('\\D', pop@id))) {
ids <- factor(as.numeric(as.character(pop@id)))
} else {ids <- factor(as.character(pop@id))}
index <- as.list(as.data.frame(t(matrix(1:(ntraits * nenvs), ncol = ntraits))))
gv <- lapply(index, function(x) cbind(pop@gv[, x]))
gv <- do.call(rbind, mapply(function(x, y) cbind(x[rep(1:nrow(x), y), ]), x = gv, y = as.list(nreps), SIMPLIFY = F))
colnames(gv) <- paste0("gv.Trait", 1:ntraits)
output_asr <- data.frame(
env = envs,
id = ids,
rep = reps,
gv
)
output_asr <- output_asr[order(output_asr$env, output_asr$rep, output_asr$id), ]
return(output_asr)
}
# Mean genetic values and mean dominance degrees.
mean <- c(4.9, 5.4, 235.2, 228.5) # Trait 1 x 2 environments, Trait 2 x 2 environments
meanDD <- c(0.4, 0.4, 0.1, 0.1) # Trait 1 and 2, same value for both environments
# Additive genetic variances and dominance degree variances.
var <- c(0.086, 0.12, 15.1, 8.5) # Trait 1 x 2 environments, Trait 2 x 2 environments
varDD <- 0.2 # Same value for all environment-within-trait combinations
# Additive genetic correlations between the two simulated traits.
TcorA <- matrix(c(
1.0, 0.6,
0.6, 1.0
), ncol = 2)
# Additive genetic correlations between the two simulated environments.
EcorA <- matrix(c(
1.0, 0.2,
0.2, 1.0
), ncol = 2)
# Dominance degree correlations between the four environment-within-trait combinations.
corDD <- diag(4) # Assuming independence
input_asr <- unstr_asr_input(
ntraits = 2,
nenvs = 2,
mean = mean,
var = var,
TcorA = TcorA,
EcorA = EcorA,
meanDD = meanDD,
varDD = varDD,
corDD = corDD
)
# 2. Use input_asr to simulate genetic values with 'AlphaSimR' based on an
# unstructured model.
library("AlphaSimR")
FOUNDERPOP <- quickHaplo(
nInd = 10,
nChr = 1,
segSites = 20
)
SP <- SimParam$new(FOUNDERPOP)
SP$addTraitAD(
nQtlPerChr = 20,
mean = input_asr$mean,
var = input_asr$var,
corA = input_asr$corA,
meanDD = input_asr$meanDD,
varDD = input_asr$varDD,
corDD = input_asr$corDD,
useVarA = TRUE
)
# By default, the variances in 'var' represent additive genetic variances.
# When useVarA = FALSE, the values represent total genetic variances.
pop <- newPop(FOUNDERPOP)
# 3. Create a data frame with simulated genetic values for the two traits in
# the two environments, with two replicates of each genotype.
gv_df <- unstr_asr_output(
pop = pop,
ntraits = 2,
nenvs = 2,
nreps = 2
)
gv_df
library(FieldSimR)
error_df <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 2,
ncols = 10,
nrows = c(10,10,12))
# prop.spatial = 0)
table(error_df$env)
nrow(error_df)
gv_df <- droplevels(gv_df_unstr[gv_df_unstr$rep %in% 1:2,])
sample1 <- sample(levels(gv_df$id), 50)
sample2 <- levels(gv_df$id)[!levels(gv_df$id) %in% sample1]
length(unique(c(sample1, sample2)))
sample3 <- sample(levels(gv_df$id), 60)
gv_df1 <- gv_df[gv_df$env == 1 & gv_df$id %in% sample1,]
gv_df2 <- gv_df[gv_df$env == 2 & gv_df$id %in% sample2,]
gv_df3 <- gv_df[gv_df$env == 3 & gv_df$id %in% sample3,]
gv_df <- rbind(gv_df1, gv_df2, gv_df3)
head(gv_df)
nrow(gv_df)
table(gv_df$env)
nlevels(gv_df$id)
pheno_df <- make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df,
randomise = T,
return.effects = T)
head(pheno_df$pheno.df)
head(pheno_df$Trait1)
with(pheno_df$pheno.df, table(id, env)) - with(gv_df, table(id, env))
plot(pheno_df$pheno.df$y.Trait1, pheno_df$Trait1$gv.Trait1 + pheno_df$Trait1$e.Trait1)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
plot(pheno_df$Trait1$gv.Trait1[order(pheno_df$Trait1$env, pheno_df$Trait1$block, pheno_df$Trait1$id)], gv_df$gv.Trait1)
plot(pheno_df$Trait2$gv.Trait2[order(pheno_df$Trait2$env, pheno_df$Trait2$block, pheno_df$Trait2$id)], gv_df$gv.Trait2)
pheno_df <- make_phenotypes(gv.df = gv_df,
error.df = error_df,
randomise = T,
return.effects = F)
with(pheno_df, tapply(id, list(env, block), function(x) length(unique(x))))
head(pheno_df)
unique(pheno_df$env[pheno_df$id %in% sample1])
unique(pheno_df$env[pheno_df$id %in% sample2])
unique(pheno_df$env[pheno_df$id %in% sample3])
sum(!unique(pheno_df$id[pheno_df$env %in% 1]) %in% sample1)
sum(!unique(pheno_df$id[pheno_df$env %in% 2]) %in% sample2)
sum(!unique(pheno_df$id[pheno_df$env %in% 3]) %in% sample3)
##########################
gv_df_unstr$id
error_df_bivar
# design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
# design_df[sample(1:300, 100)] <- 1
# design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
design_df[3,1] <- 0
design_df[c(10, 15),2] <- 0
design_df[1,3] <- 0
colSums(design_df)
pheno_df$
# insert fully rep'd design
design_df2 <- design_df
design_df
design_df2
design_df2 <- design_df
design_df2[design_df2 < 4] <- 4
error_df2 <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 4,
ncols = 16,
nrows = 25)
pheno_df2 <- make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df2,
design.df = design_df2,
randomise = T,
return.effects = T)
error_df <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 2,
ncols = 10,
nrows = c(10,10,12))
# prop.spatial = 0)
table(error_df$env)
nrow(error_df)
gv_df <- droplevels(gv_df_unstr[gv_df_unstr$rep %in% 1:2,])
sample1 <- sample(levels(gv_df$id), 50)
sample2 <- levels(gv_df$id)[!levels(gv_df$id) %in% sample1]
length(unique(c(sample1, sample2)))
sample3 <- sample(levels(gv_df$id), 60)
gv_df1 <- gv_df[gv_df$env == 1 & gv_df$id %in% sample1,]
gv_df2 <- gv_df[gv_df$env == 2 & gv_df$id %in% sample2,]
gv_df3 <- gv_df[gv_df$env == 3 & gv_df$id %in% sample3,]
gv_df <- rbind(gv_df1, gv_df2, gv_df3)
head(gv_df)
nrow(gv_df)
table(gv_df$env)
nlevels(gv_df$id)
pheno_df <- make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df,
randomise = T,
return.effects = T)
head(pheno_df$pheno.df)
head(pheno_df$Trait1)
with(pheno_df$pheno.df, table(id, env)) - with(gv_df, table(id, env))
plot(pheno_df$pheno.df$y.Trait1, pheno_df$Trait1$gv.Trait1 + pheno_df$Trait1$e.Trait1)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
plot(pheno_df$Trait1$gv.Trait1[order(pheno_df$Trait1$env, pheno_df$Trait1$block, pheno_df$Trait1$id)], gv_df$gv.Trait1)
plot(pheno_df$Trait2$gv.Trait2[order(pheno_df$Trait2$env, pheno_df$Trait2$block, pheno_df$Trait2$id)], gv_df$gv.Trait2)
pheno_df <- make_phenotypes(gv.df = gv_df,
error.df = error_df,
randomise = T,
return.effects = F)
with(pheno_df, tapply(id, list(env, block), function(x) length(unique(x))))
head(pheno_df)
unique(pheno_df$env[pheno_df$id %in% sample1])
unique(pheno_df$env[pheno_df$id %in% sample2])
unique(pheno_df$env[pheno_df$id %in% sample3])
sum(!unique(pheno_df$id[pheno_df$env %in% 1]) %in% sample1)
sum(!unique(pheno_df$id[pheno_df$env %in% 2]) %in% sample2)
sum(!unique(pheno_df$id[pheno_df$env %in% 3]) %in% sample3)
##########################
gv_df_unstr$id
error_df_bivar
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
colSums(design_df)
gv_df_unstr$id
error_df_bivar
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
colSums(design_df)
gv_df_unstr$id
error_df_bivar
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
colSums(design_df)
gv_df_unstr$id
error_df_bivar
design_df <- as.table(matrix(0, ncol = 3, nrow = 100))
design_df[sample(1:300, 100)] <- 1
design_df[sample(1:300, 100)] <- 3
colSums(design_df)
design_df[3,1]
design_df[
head(design_df)
design_df[1:2,1] <- 0
colSums(design_df)
head(design_df)
design_df[1,2]
design_df[1,2] <- 0
colSums(design_df)
design_df[1,3] <- 1
colSums(design_df)
design_df
design_df[4,3] <- 1
colSums(design_df)
head(design_df)
head(design_df,10)
design_df[7,1] <- 0
colSums(design_df)
# design.df.orig <- design_df
design_df <- design.df.orig
design.df.orig <- design_df
# design.df.orig <- design_df
design_df <- design.df.orig
colnames(design_df) <- 1:3
rownames(design_df) <- 1:100
error_df <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 3,
ncols = 12,
nrows = 10)
gv_df <- gv_df_unstr[gv_df_unstr$rep %in% 1:2,]
gv_df2 <- gv_df[gv_df$rep == 1,]
gv_df2$rep <- 3
gv_df3 <- rbind(gv_df, gv_df2)
pheno_df <- make_phenotypes(gv.df = gv_df3[gv_df3$rep %in% 1,],
error.df = error_df,
design.df = design_df,
randomise = T,
return.effects = T)
with(pheno_df$pheno.df, table(id, env)) - design_df[rowSums(design_df) != 0]
head(pheno_df$pheno.df)
plot(pheno_df$pheno.df$y.Trait1, pheno_df$Trait1$gv.Trait1 + pheno_df$Trait1$e.Trait1)
head(gv_df3[gv_df3$env ==1 & gv_df3$rep ==1,][pheno_df$Trait1$id[pheno_df$Trait1$env ==1],])
head(pheno_df$Trait1[pheno_df$Trait1$env ==1,])
plot(pheno_df$Trait1$gv.Trait1[pheno_df$Trait1$env ==1], gv_df3[gv_df3$env ==1 & gv_df3$rep ==1,][trimws(pheno_df$Trait1$id[pheno_df$Trait1$env ==1]),]$gv.Trait1)
plot(pheno_df$Trait1$e.Trait1, error_df$e.Trait1)
plot(pheno_df$pheno.df$y.Trait2, pheno_df$Trait2$gv.Trait2 + pheno_df$Trait2$e.Trait2)
plot(pheno_df$Trait2$e.Trait2, error_df$e.Trait2)
pheno_df$
# insert fully rep'd design
design_df2 <- design_df
design_df2[design_df2 < 4] <- 4
# insert fully rep'd design
design_df2 <- design_df
design_df2[design_df2 < 4] <- 4
error_df2 <- field_trial_error(ntraits = 2,
nenvs = 3,
nblocks = 4,
ncols = 16,
nrows = 25)
pheno_df2 <- make_phenotypes(gv.df = gv_df[gv_df$rep == 1,],
error.df = error_df2,
design.df = design_df2,
randomise = T,
return.effects = T)
with(pheno_df2$pheno.df, table(id, env)) - design_df2[rowSums(design_df2) != 0]
head(pheno_df2$pheno.df)
gv_df2 <- gv_df
gv_df2$rep <- as.character(gv_df2$rep)
gv_df2$rep[gv_df2$rep == 1] <- 3
gv_df2$rep[gv_df2$rep == 2] <- 4
gv_df2 <- rbind(gv_df,gv_df2)
gv_df2 <- gv_df2[order(gv_df2$env, gv_df2$rep, gv_df2$id),]
head(gv_df2)
plot(pheno_df2$pheno.df$y.Trait1[order(pheno_df2$pheno.df$env, pheno_df2$pheno.df$block, pheno_df2$pheno.df$id)], gv_df2$gv.Trait1 + error_df2$e.Trait1[order(pheno_df2$pheno.df$env, pheno_df2$pheno.df$block, pheno_df2$pheno.df$id)])
3*3
12*24
4*24
g1 <- rnorm(1000) * 2
g1 <- rnorm(1000) * 2
g2 <- rnorm(1000) * 1
gm <- (g1 + g2)/2
I <- g1 - gm
g2 + gm
plot(I, g2 + gm)
plot(gm, g2 + I)
plot(g2, gm + I)
plot(g1, gm - I)
plot(g1, gm + I)
plot(g2, gm - I)
var(g1)
var(gm) + var(I) - 2*cov(gm, I)
var(gm) + var(I) + 2*cov(gm, I)
var(gm) + var(I) - 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
cov(gm, I)
(var(g1) - var(g2))/4
var(sd(g1))
sd(g1)
var(c(sd(g1),sd(g2)))
cov(gm, I)
(var(g1) - var(g2))/4
cov(g1, g2)
g1 <- rnorm(1000) * 1
g2 <- rnorm(1000) * 1 + g1
cov(g1, g2)
gm <- (g1 + g2)/2
I <- g1 - gm
plot(g1, gm + I)
plot(g2, gm - I)
var(g1)
var(gm) + var(I) + 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
cov(gm, I)
(var(g1) - var(g2))/4
g1 <- rnorm(1000) * 1
g2 <- rnorm(1000) * 2
(var(g1) - var(g2))/4
var(c(sd(g1), sd(g2)))
cov(gm, I)
(var(g1) - var(g2))/4
g1 <- rnorm(1000) * 1
g2 <- rnorm(1000) * 2
cov(g1, g2)
gm <- (g1 + g2)/2
I <- g1 - gm
plot(g1, gm + I)
plot(g2, gm - I)
var(g1)
var(gm) + var(I) + 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
cov(gm, I)
(var(g1) - var(g2))/4
cov(gm, I)
(var(g1) - var(g2))/4
var(c(sd(g1), sd(g2)))
cov(g1, g2)
(var(g1) - var(g2))
(var(g1) - var(g2))/4
cov(g1, g2)
cov(gm+I, gm-I)
cov(gm, I)
var(gm) - var(I)
cov(gm+I, gm-I)
var(gm) - var(I)
cov(gm, I)
(var(g1) - var(g2))/4
var(c(sd(g1), sd(g2)))
cov(gm+I, gm-I)
var(gm) - var(I)
var(c(sd(g1), sd(g2)))/5
g1 <- rnorm(1000) * 1
g2 <- rnorm(1000) * 2
cov(g1, g2)
gm <- (g1 + g2)/2
I <- g1 - gm
plot(g1, gm + I)
plot(g2, gm - I)
var(g1)
var(gm) + var(I) + 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
cov(gm, I)
(var(g1) - var(g2))/4
cov(gm+I, gm-I)
var(gm) - var(I)
set.seed(123)
g1 <- rnorm(1000) * 1
g2 <- rnorm(1000) * 2
cov(g1, g2)
gm <- (g1 + g2)/2
I <- g1 - gm
plot(g1, gm + I)
plot(g2, gm - I)
var(g1)
var(gm) + var(I) + 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
var(g2)
var(gm) + var(I) - 2*cov(gm, I)
cov(gm, I)
(var(g1) - var(g2))/4
cov(gm+I, gm-I)
var(gm) - var(I)
var(c(sd(g1), sd(g2)))
# now scale to unit variance
g1star <- scale(g1)
g2star <- scale(g2)
# now scale to unit variance
g1star <- scale(g1)
g2star <- scale(g2)
gmstar <- (g1star + g2star)/2
Istar <- g1star - gmstar
plot(g1, gm + I)
var(g1star)
var(gmstar) + var(Istar) + 2*cov(gmstar, Istar)
cov(gmstar, Istar)
var(gmstar) + var(Istar) - 2*cov(gmstar, Istar)
var(gmstar) + var(Istar) + 2*cov(gmstar, Istar)
cov(gmstar, Istar)
(var(g1star) - var(g2star))/4
cov(gmstar+Istar, gmstar-Istar)
cov(g1star, g2star)
cov(gmstar+Istar, gmstar-Istar)
var(gm) - var(I)
library(devtools)
library(available)
library(styler)
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
exports(FieldSimR)
devtools::build_vignettes()
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
styler::style_pkg() # see changes with git diff <file path>
#available("FieldSimR")
devtools::load_all()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::build(vignettes=TRUE)
devtools::install(build_vignettes = TRUE) # STRG + Shift + b to reload
devtools::build_manual()
#use_package() # can add package names to DESCRIPTION file
usethis::use_github_action_check_standard()
## Most recent recommended testing pipeline
usethis::use_github_links()
devtools::spell_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
